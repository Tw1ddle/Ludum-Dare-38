// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var ShapeMesh = function() { };
ShapeMesh.__name__ = true;
ShapeMesh.prototype = {
	__class__: ShapeMesh
};
var Main = function() {
	this.shapes = [];
	this.dt = 0.0;
	this.lastAnimationTime = 0.0;
	this.signal_clicked = new msignal_Signal2();
	this.pointer = new THREE.Vector2(0.0,0.0);
	this.worldScene = new THREE.Scene();
	window.onload = $bind(this,this.onWindowLoaded);
	this.worldBuilder = new ludum_WorldBuilder();
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.prototype = {
	onWindowLoaded: function() {
		var _gthis = this;
		this.gameAttachPoint = window.document.getElementById("game");
		var gameDiv = window.document.createElement("attach");
		this.gameAttachPoint.appendChild(gameDiv);
		var glSupported = WebGLDetector.detect();
		if(glSupported != 0) {
			var unsupportedInfo = window.document.createElement("div");
			unsupportedInfo.style.position = "absolute";
			unsupportedInfo.style.top = "10px";
			unsupportedInfo.style.width = "100%";
			unsupportedInfo.style.textAlign = "center";
			unsupportedInfo.style.color = "#ffffff";
			switch(glSupported) {
			case 1:
				unsupportedInfo.innerHTML = "Your browser supports WebGL, but the feature appears to be disabled. Click <a href=\"" + "https://github.com/Tw1ddle/Ludum-Dare-38" + "\" target=\"_blank\">here for screenshots</a> instead.";
				break;
			case 2:
				unsupportedInfo.innerHTML = "Your browser does not support WebGL. Click <a href=\"" + "https://github.com/Tw1ddle/Ludum-Dare-38" + "\" target=\"_blank\">here for screenshots</a> instead.";
				break;
			default:
				unsupportedInfo.innerHTML = "Could not detect WebGL support. Click <a href=\"" + "https://github.com/Tw1ddle/Ludum-Dare-38" + "\" target=\"_blank\">here for screenshots</a> instead.";
			}
			gameDiv.appendChild(unsupportedInfo);
			return;
		}
		var credits = window.document.createElement("div");
		credits.style.position = "absolute";
		credits.style.bottom = "-170px";
		credits.style.width = "100%";
		credits.style.textAlign = "center";
		credits.style.color = "#333333";
		credits.innerHTML = "Created for <a href=" + "https://ldjam.com/events/ludum-dare/38" + " target=\"_blank\"> " + "Ludum Dare 38" + "</a> by <a href=" + "https://twitter.com/Sam_Twidale" + " target=\"_blank\"> " + "Sam Twidale" + "</a> using <a href=" + "http://haxe.org/" + " target=\"_blank\">Haxe</a> and <a href=" + "https://github.com/mrdoob/three.js/" + " target=\"_blank\">three.js</a>. Get the code <a href=" + "https://github.com/Tw1ddle/Ludum-Dare-38" + " target=\"_blank\">here</a>.";
		gameDiv.appendChild(credits);
		this.renderer = new THREE.WebGLRenderer({ antialias : false});
		this.renderer.sortObjects = true;
		this.renderer.autoClear = false;
		this.renderer.setSize(800,600);
		this.renderer.setClearColor(new THREE.Color(2236962));
		this.worldCamera = new THREE.PerspectiveCamera(30,1.3333333333333333,0.5,2000000);
		this.skyEffectController = new shaders_SkyEffectController(this);
		var skyMaterial = new THREE.ShaderMaterial({ fragmentShader : shaders_SkyShader.fragmentShader, vertexShader : shaders_SkyShader.vertexShader, uniforms : shaders_SkyShader.uniforms, side : THREE.BackSide});
		var skyMesh = new THREE.Mesh(new THREE.SphereBufferGeometry(450000,32,15),skyMaterial);
		this.worldScene.add(skyMesh);
		var _g = 0;
		var _g1 = this.worldBuilder.shapes;
		while(_g < _g1.length) {
			var shapeData = _g1[_g];
			++_g;
			var shape_shape;
			var shape_mesh = new THREE.Mesh(new THREE.CircleBufferGeometry(shapeData.r,24),new THREE.MeshBasicMaterial({ transparent : true, depthWrite : false, depthTest : false, opacity : shapeData.a, color : shapeData.rgb}));
			shape_shape = shapeData;
			shape_mesh.position.set(shapeData.x - 400.,300. - shapeData.y,-1410);
			this.worldScene.add(shape_mesh);
		}
		var _g2 = 0;
		var _g11 = this.shapes;
		while(_g2 < _g11.length) {
			var shape = _g11[_g2];
			++_g2;
			var tmpPos = shape.mesh.position.clone();
			motion_Actuate.tween(shape.mesh.position,10,{ z : shape.mesh.position.z}).onComplete(function() {
			});
			shape.mesh.position.z = 0;
		}
		window.document.addEventListener("resize",function(event) {
		},false);
		window.document.addEventListener("contextmenu",function(event1) {
			event1.preventDefault();
		},true);
		this.signal_clicked.add(function(x,y) {
			var raycaster = new THREE.Raycaster();
			raycaster.setFromCamera(_gthis.pointer,_gthis.worldCamera);
		});
		window.document.addEventListener("mousedown",function(event2) {
			var value = (event2.x - _gthis.gameAttachPoint.offsetLeft) / _gthis.gameAttachPoint.clientWidth * 2 - 1;
			_gthis.pointer.x = value < -1 ? -1 : value > 1 ? 1 : value;
			var value1 = -((event2.y - _gthis.gameAttachPoint.offsetTop) / _gthis.gameAttachPoint.clientHeight) * 2 + 1;
			_gthis.pointer.y = value1 < -1 ? -1 : value1 > 1 ? 1 : value1;
			_gthis.signal_clicked.dispatch(_gthis.pointer.x,_gthis.pointer.y);
		},true);
		window.document.addEventListener("touchstart",function(event3) {
			var value2 = (event3.x - _gthis.gameAttachPoint.offsetLeft) / _gthis.gameAttachPoint.clientWidth * 2 - 1;
			_gthis.pointer.x = value2 < -1 ? -1 : value2 > 1 ? 1 : value2;
			var value3 = -((event3.y - _gthis.gameAttachPoint.offsetTop) / _gthis.gameAttachPoint.clientHeight) * 2 + 1;
			_gthis.pointer.y = value3 < -1 ? -1 : value3 > 1 ? 1 : value3;
			_gthis.signal_clicked.dispatch(_gthis.pointer.x,_gthis.pointer.y);
		},true);
		gameDiv.appendChild(this.renderer.domElement);
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,animate: function(time) {
		this.dt = (time - this.lastAnimationTime) * 0.001;
		this.lastAnimationTime = time;
		this.renderer.clear();
		this.renderer.render(this.worldScene,this.worldCamera);
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var ludum_WorldBuilder = function() {
	this.shapes = [];
	this.loadWorld("{\"shapes\":\r\n[{\"type\":32, \"data\":[300,484,32],\"color\":[255,247,126,128],\"score\":0.135301},\r\n{\"type\":32, \"data\":[451,61,32],\"color\":[255,253,211,128],\"score\":0.131808},\r\n{\"type\":32, \"data\":[302,264,32],\"color\":[255,243,126,128],\"score\":0.128506},\r\n{\"type\":32, \"data\":[358,300,33],\"color\":[255,232,106,128],\"score\":0.125398},\r\n{\"type\":32, \"data\":[234,467,32],\"color\":[255,199,92,128],\"score\":0.122548},\r\n{\"type\":32, \"data\":[336,215,32],\"color\":[209,203,72,128],\"score\":0.120507},\r\n{\"type\":32, \"data\":[495,43,22],\"color\":[255,255,251,128],\"score\":0.118524},\r\n{\"type\":32, \"data\":[622,415,32],\"color\":[202,181,74,128],\"score\":0.116687},\r\n{\"type\":32, \"data\":[708,381,32],\"color\":[159,160,35,128],\"score\":0.115444},\r\n{\"type\":32, \"data\":[402,70,32],\"color\":[174,175,156,128],\"score\":0.113651},\r\n{\"type\":32, \"data\":[617,477,32],\"color\":[181,171,69,128],\"score\":0.11207},\r\n{\"type\":32, \"data\":[595,532,28],\"color\":[177,169,100,128],\"score\":0.11084},\r\n{\"type\":32, \"data\":[195,485,32],\"color\":[220,160,76,128],\"score\":0.109065},\r\n{\"type\":32, \"data\":[327,508,32],\"color\":[196,157,70,128],\"score\":0.107821},\r\n{\"type\":32, \"data\":[383,246,32],\"color\":[146,170,30,128],\"score\":0.106523},\r\n{\"type\":32, \"data\":[266,443,32],\"color\":[186,149,67,128],\"score\":0.105275},\r\n{\"type\":32, \"data\":[520,120,32],\"color\":[141,144,91,128],\"score\":0.104137},\r\n{\"type\":32, \"data\":[315,93,32],\"color\":[147,139,63,128],\"score\":0.10303},\r\n{\"type\":32, \"data\":[742,337,32],\"color\":[141,147,21,128],\"score\":0.101897},\r\n{\"type\":32, \"data\":[592,262,32],\"color\":[115,151,0,128],\"score\":0.100836},\r\n{\"type\":32, \"data\":[669,439,32],\"color\":[117,137,15,128],\"score\":0.0998977},\r\n{\"type\":32, \"data\":[441,271,32],\"color\":[99,145,0,128],\"score\":0.0989231},\r\n{\"type\":32, \"data\":[78,122,32],\"color\":[117,132,12,128],\"score\":0.0980095},\r\n{\"type\":32, \"data\":[279,243,32],\"color\":[161,146,60,128],\"score\":0.0971062},\r\n{\"type\":32, \"data\":[171,127,32],\"color\":[118,131,31,128],\"score\":0.0962129},\r\n{\"type\":32, \"data\":[314,460,32],\"color\":[186,143,78,128],\"score\":0.0952928},\r\n{\"type\":32, \"data\":[371,128,32],\"color\":[119,118,19,128],\"score\":0.094458},\r\n{\"type\":32, \"data\":[599,357,32],\"color\":[113,130,9,128],\"score\":0.0935516},\r\n{\"type\":32, \"data\":[278,493,31],\"color\":[212,140,90,128],\"score\":0.0927059},\r\n{\"type\":32, \"data\":[295,172,32],\"color\":[96,124,0,128],\"score\":0.0919246},\r\n{\"type\":32, \"data\":[530,36,14],\"color\":[228,229,227,128],\"score\":0.0910716},\r\n{\"type\":32, \"data\":[685,311,32],\"color\":[78,121,0,128],\"score\":0.0902941},\r\n{\"type\":32, \"data\":[226,144,32],\"color\":[103,120,8,128],\"score\":0.0894921},\r\n{\"type\":32, \"data\":[658,371,32],\"color\":[92,121,0,128],\"score\":0.0887368},\r\n{\"type\":32, \"data\":[466,101,32],\"color\":[106,111,76,128],\"score\":0.0879922},\r\n{\"type\":32, \"data\":[318,290,32],\"color\":[180,147,95,128],\"score\":0.0872457},\r\n{\"type\":32, \"data\":[389,184,32],\"color\":[80,111,0,128],\"score\":0.0865489},\r\n{\"type\":32, \"data\":[496,216,32],\"color\":[73,113,0,128],\"score\":0.0858347},\r\n{\"type\":32, \"data\":[275,88,32],\"color\":[117,108,65,128],\"score\":0.0851415},\r\n{\"type\":32, \"data\":[569,313,32],\"color\":[83,114,2,128],\"score\":0.0844437},\r\n{\"type\":32, \"data\":[435,209,32],\"color\":[61,91,0,128],\"score\":0.083976},\r\n{\"type\":32, \"data\":[634,273,32],\"color\":[81,113,0,128],\"score\":0.0832885},\r\n{\"type\":32, \"data\":[228,491,28],\"color\":[153,102,62,128],\"score\":0.0828662},\r\n{\"type\":32, \"data\":[538,178,33],\"color\":[82,94,0,128],\"score\":0.0822444},\r\n{\"type\":32, \"data\":[353,72,27],\"color\":[109,107,104,128],\"score\":0.0818247},\r\n{\"type\":32, \"data\":[121,122,31],\"color\":[99,110,28,128],\"score\":0.0812231},\r\n{\"type\":32, \"data\":[372,348,23],\"color\":[117,123,45,128],\"score\":0.080757},\r\n{\"type\":32, \"data\":[420,105,24],\"color\":[106,100,52,128],\"score\":0.0803286},\r\n{\"type\":32, \"data\":[505,65,19],\"color\":[0,0,31,128],\"score\":0.0799209},\r\n{\"type\":32, \"data\":[474,47,18],\"color\":[239,242,232,128],\"score\":0.0793903},\r\n{\"type\":32, \"data\":[349,259,32],\"color\":[138,124,73,128],\"score\":0.0789941},\r\n{\"type\":32, \"data\":[626,325,32],\"color\":[40,82,0,128],\"score\":0.078594},\r\n{\"type\":32, \"data\":[335,155,32],\"color\":[71,82,4,128],\"score\":0.0782259},\r\n{\"type\":32, \"data\":[346,486,25],\"color\":[121,111,55,128],\"score\":0.0778716},\r\n{\"type\":32, \"data\":[591,556,20],\"color\":[153,157,117,128],\"score\":0.0774563},\r\n{\"type\":32, \"data\":[396,285,29],\"color\":[82,102,15,128],\"score\":0.0771139},\r\n{\"type\":32, \"data\":[469,258,30],\"color\":[68,101,3,128],\"score\":0.0767544},\r\n{\"type\":32, \"data\":[277,135,32],\"color\":[63,76,2,128],\"score\":0.0764347},\r\n{\"type\":32, \"data\":[420,44,11],\"color\":[225,227,220,128],\"score\":0.0760794},\r\n{\"type\":32, \"data\":[550,32,7],\"color\":[242,243,241,128],\"score\":0.0757963},\r\n{\"type\":32, \"data\":[255,187,32],\"color\":[60,81,7,128],\"score\":0.0754623},\r\n{\"type\":32, \"data\":[434,373,27],\"color\":[61,93,17,128],\"score\":0.0751396},\r\n{\"type\":32, \"data\":[103,277,24],\"color\":[56,97,0,128],\"score\":0.0748212},\r\n{\"type\":32, \"data\":[604,445,15],\"color\":[186,152,109,128],\"score\":0.0745089},\r\n{\"type\":32, \"data\":[515,38,10],\"color\":[255,255,255,128],\"score\":0.0741833},\r\n{\"type\":32, \"data\":[730,381,30],\"color\":[100,98,38,128],\"score\":0.0738714},\r\n{\"type\":32, \"data\":[56,125,32],\"color\":[75,86,26,128],\"score\":0.073574},\r\n{\"type\":32, \"data\":[239,335,19],\"color\":[82,120,3,128],\"score\":0.0732726},\r\n{\"type\":32, \"data\":[494,92,13],\"color\":[167,171,143,128],\"score\":0.0729847},\r\n{\"type\":32, \"data\":[510,157,32],\"color\":[63,61,23,128],\"score\":0.0727024},\r\n{\"type\":32, \"data\":[234,455,32],\"color\":[147,108,74,128],\"score\":0.0724338},\r\n{\"type\":32, \"data\":[610,398,17],\"color\":[208,159,126,128],\"score\":0.0721509},\r\n{\"type\":32, \"data\":[654,412,32],\"color\":[56,70,18,128],\"score\":0.0718793},\r\n{\"type\":32, \"data\":[200,502,27],\"color\":[122,102,52,128],\"score\":0.0716958},\r\n{\"type\":32, \"data\":[226,118,28],\"color\":[81,82,23,128],\"score\":0.0714642},\r\n{\"type\":32, \"data\":[643,463,32],\"color\":[89,94,39,128],\"score\":0.0712246},\r\n{\"type\":32, \"data\":[45,268,28],\"color\":[45,71,20,128],\"score\":0.0710223},\r\n{\"type\":32, \"data\":[311,54,7],\"color\":[200,201,199,128],\"score\":0.0708216},\r\n{\"type\":32, \"data\":[476,333,20],\"color\":[43,95,69,128],\"score\":0.0706664},\r\n{\"type\":32, \"data\":[357,329,14],\"color\":[198,164,115,128],\"score\":0.0704744},\r\n{\"type\":32, \"data\":[315,525,23],\"color\":[125,117,54,128],\"score\":0.070292},\r\n{\"type\":32, \"data\":[499,39,11],\"color\":[255,255,255,128],\"score\":0.0699925},\r\n{\"type\":32, \"data\":[709,325,32],\"color\":[61,83,8,128],\"score\":0.0698084},\r\n{\"type\":32, \"data\":[694,396,32],\"color\":[89,93,41,128],\"score\":0.0696261},\r\n{\"type\":32, \"data\":[524,65,23],\"color\":[7,6,47,128],\"score\":0.0694305},\r\n{\"type\":32, \"data\":[495,14,16],\"color\":[0,0,35,128],\"score\":0.0692047},\r\n{\"type\":32, \"data\":[490,66,12],\"color\":[0,0,42,128],\"score\":0.0690618},\r\n{\"type\":32, \"data\":[680,275,17],\"color\":[59,91,0,128],\"score\":0.068925},\r\n{\"type\":32, \"data\":[158,144,6],\"color\":[254,254,255,128],\"score\":0.0687276},\r\n{\"type\":32, \"data\":[443,63,24],\"color\":[99,96,98,128],\"score\":0.0685526},\r\n{\"type\":32, \"data\":[558,115,8],\"color\":[184,186,144,128],\"score\":0.0683554},\r\n{\"type\":32, \"data\":[483,121,27],\"color\":[19,35,49,128],\"score\":0.0681969},\r\n{\"type\":32, \"data\":[400,109,29],\"color\":[74,71,44,128],\"score\":0.068022},\r\n{\"type\":32, \"data\":[540,9,22],\"color\":[0,0,41,128],\"score\":0.0678412},\r\n{\"type\":32, \"data\":[564,203,33],\"color\":[36,53,15,128],\"score\":0.0676899},\r\n{\"type\":32, \"data\":[571,520,14],\"color\":[0,0,30,128],\"score\":0.0675303},\r\n{\"type\":32, \"data\":[417,67,7],\"color\":[255,255,255,128],\"score\":0.0673239},\r\n{\"type\":32, \"data\":[586,540,10],\"color\":[199,201,201,128],\"score\":0.0671863},\r\n{\"type\":32, \"data\":[592,314,32],\"color\":[26,54,0,128],\"score\":0.0670545},\r\n{\"type\":32, \"data\":[292,213,32],\"color\":[93,92,43,128],\"score\":0.0669091},\r\n{\"type\":32, \"data\":[250,480,32],\"color\":[145,99,67,128],\"score\":0.0667586},\r\n{\"type\":32, \"data\":[279,259,24],\"color\":[156,130,94,128],\"score\":0.0666065},\r\n{\"type\":32, \"data\":[407,44,6],\"color\":[255,255,255,128],\"score\":0.0664537},\r\n{\"type\":32, \"data\":[604,504,24],\"color\":[116,101,61,128],\"score\":0.0663133},\r\n{\"type\":32, \"data\":[577,400,21],\"color\":[0,0,49,128],\"score\":0.0661801},\r\n{\"type\":32, \"data\":[393,230,32],\"color\":[64,88,23,128],\"score\":0.0660538},\r\n{\"type\":32, \"data\":[608,423,13],\"color\":[208,160,136,128],\"score\":0.0659089},\r\n{\"type\":32, \"data\":[628,547,25],\"color\":[12,11,44,128],\"score\":0.0657876},\r\n{\"type\":32, \"data\":[329,117,32],\"color\":[76,74,33,128],\"score\":0.0656838},\r\n{\"type\":32, \"data\":[326,318,15],\"color\":[53,68,19,128],\"score\":0.0655495},\r\n{\"type\":32, \"data\":[590,374,11],\"color\":[177,133,114,128],\"score\":0.0654106},\r\n{\"type\":32, \"data\":[393,365,15],\"color\":[65,89,19,128],\"score\":0.0653154},\r\n{\"type\":32, \"data\":[432,87,8],\"color\":[255,253,178,128],\"score\":0.0651252},\r\n{\"type\":32, \"data\":[416,90,9],\"color\":[0,0,46,128],\"score\":0.0650136},\r\n{\"type\":32, \"data\":[434,192,32],\"color\":[40,51,10,128],\"score\":0.0648958},\r\n{\"type\":32, \"data\":[527,100,9],\"color\":[187,184,166,128],\"score\":0.0647664},\r\n{\"type\":32, \"data\":[294,493,12],\"color\":[246,203,155,128],\"score\":0.0646722},\r\n{\"type\":32, \"data\":[767,331,14],\"color\":[120,124,43,128],\"score\":0.0645587},\r\n{\"type\":32, \"data\":[301,419,21],\"color\":[24,47,51,128],\"score\":0.0644519},\r\n{\"type\":32, \"data\":[167,149,6],\"color\":[178,188,220,128],\"score\":0.0643591},\r\n{\"type\":32, \"data\":[657,326,32],\"color\":[36,63,0,128],\"score\":0.0642781},\r\n{\"type\":32, \"data\":[321,200,20],\"color\":[141,128,84,128],\"score\":0.0641775},\r\n{\"type\":32, \"data\":[85,135,30],\"color\":[55,68,29,128],\"score\":0.064084},\r\n{\"type\":32, \"data\":[567,356,12],\"color\":[116,101,67,128],\"score\":0.0639913},\r\n{\"type\":32, \"data\":[606,571,9],\"color\":[113,131,76,128],\"score\":0.0639013},\r\n{\"type\":32, \"data\":[296,62,10],\"color\":[122,119,124,128],\"score\":0.0638182},\r\n{\"type\":32, \"data\":[348,520,20],\"color\":[63,76,29,128],\"score\":0.0637388},\r\n{\"type\":32, \"data\":[503,152,17],\"color\":[103,95,33,128],\"score\":0.0636506},\r\n{\"type\":32, \"data\":[445,38,6],\"color\":[255,255,255,128],\"score\":0.0635559},\r\n{\"type\":32, \"data\":[162,162,13],\"color\":[0,0,46,128],\"score\":0.0634673},\r\n{\"type\":32, \"data\":[528,36,7],\"color\":[255,255,255,128],\"score\":0.0633385},\r\n{\"type\":32, \"data\":[369,66,5],\"color\":[255,255,255,128],\"score\":0.0631895},\r\n{\"type\":32, \"data\":[423,57,5],\"color\":[0,0,7,128],\"score\":0.0631011},\r\n{\"type\":32, \"data\":[402,342,21],\"color\":[0,0,52,128],\"score\":0.0630053},\r\n{\"type\":32, \"data\":[362,199,21],\"color\":[64,92,21,128],\"score\":0.0629203},\r\n{\"type\":32, \"data\":[450,399,9],\"color\":[95,137,26,128],\"score\":0.0628373},\r\n{\"type\":32, \"data\":[283,455,24],\"color\":[146,112,70,128],\"score\":0.0627534},\r\n{\"type\":32, \"data\":[546,109,6],\"color\":[201,201,207,128],\"score\":0.0626583},\r\n{\"type\":32, \"data\":[355,252,31],\"color\":[110,107,61,128],\"score\":0.0625769},\r\n{\"type\":32, \"data\":[518,201,32],\"color\":[39,59,6,128],\"score\":0.0625008},\r\n{\"type\":32, \"data\":[508,95,8],\"color\":[195,194,176,128],\"score\":0.0623892},\r\n{\"type\":32, \"data\":[400,76,8],\"color\":[214,215,205,128],\"score\":0.0622582},\r\n{\"type\":32, \"data\":[194,473,22],\"color\":[161,111,81,128],\"score\":0.062177},\r\n{\"type\":32, \"data\":[401,43,6],\"color\":[249,252,247,128],\"score\":0.0620831},\r\n{\"type\":32, \"data\":[600,540,13],\"color\":[141,112,48,128],\"score\":0.0620077},\r\n{\"type\":32, \"data\":[374,67,5],\"color\":[255,255,255,128],\"score\":0.0619213},\r\n{\"type\":32, \"data\":[193,157,10],\"color\":[100,124,77,128],\"score\":0.0618434},\r\n{\"type\":32, \"data\":[536,146,10],\"color\":[0,0,62,128],\"score\":0.0617559},\r\n{\"type\":32, \"data\":[476,86,12],\"color\":[136,128,105,128],\"score\":0.0616792},\r\n{\"type\":32, \"data\":[262,525,13],\"color\":[0,2,45,128],\"score\":0.0616083},\r\n{\"type\":32, \"data\":[549,298,7],\"color\":[152,161,120,128],\"score\":0.0615355},\r\n{\"type\":32, \"data\":[626,264,28],\"color\":[64,80,19,128],\"score\":0.0614573},\r\n{\"type\":32, \"data\":[541,35,5],\"color\":[255,255,255,128],\"score\":0.0613736},\r\n{\"type\":32, \"data\":[168,118,25],\"color\":[47,51,13,128],\"score\":0.0612996},\r\n{\"type\":32, \"data\":[448,364,15],\"color\":[0,0,62,128],\"score\":0.0612197},\r\n{\"type\":32, \"data\":[553,523,28],\"color\":[7,8,48,128],\"score\":0.0611509},\r\n{\"type\":32, \"data\":[553,85,24],\"color\":[10,10,50,128],\"score\":0.0610859},\r\n{\"type\":32, \"data\":[446,108,23],\"color\":[82,75,55,128],\"score\":0.0610021},\r\n{\"type\":32, \"data\":[490,44,12],\"color\":[220,225,214,128],\"score\":0.0609219},\r\n{\"type\":32, \"data\":[461,305,12],\"color\":[70,92,17,128],\"score\":0.0608471},\r\n{\"type\":32, \"data\":[317,429,11],\"color\":[117,115,46,128],\"score\":0.0607696},\r\n{\"type\":32, \"data\":[514,10,20],\"color\":[10,9,50,128],\"score\":0.060695},\r\n{\"type\":32, \"data\":[582,420,14],\"color\":[4,4,49,128],\"score\":0.0606433},\r\n{\"type\":32, \"data\":[346,355,17],\"color\":[0,0,48,128],\"score\":0.0605722},\r\n{\"type\":32, \"data\":[600,336,32],\"color\":[30,53,7,128],\"score\":0.060509},\r\n{\"type\":32, \"data\":[205,124,30],\"color\":[57,63,21,128],\"score\":0.0604462},\r\n{\"type\":32, \"data\":[643,389,26],\"color\":[59,71,19,128],\"score\":0.0603838},\r\n{\"type\":32, \"data\":[361,321,24],\"color\":[146,129,84,128],\"score\":0.060312},\r\n{\"type\":32, \"data\":[381,53,10],\"color\":[17,14,55,128],\"score\":0.0602337},\r\n{\"type\":32, \"data\":[346,294,16],\"color\":[196,156,124,128],\"score\":0.0601657},\r\n{\"type\":32, \"data\":[151,506,24],\"color\":[6,8,49,128],\"score\":0.0600911},\r\n{\"type\":32, \"data\":[269,177,32],\"color\":[37,55,14,128],\"score\":0.0600252},\r\n{\"type\":32, \"data\":[724,382,32],\"color\":[87,84,42,128],\"score\":0.0599605},\r\n{\"type\":32, \"data\":[345,433,18],\"color\":[4,10,45,128],\"score\":0.0598979},\r\n{\"type\":32, \"data\":[604,386,9],\"color\":[202,157,109,128],\"score\":0.0598282},\r\n{\"type\":32, \"data\":[560,33,3],\"color\":[255,255,255,128],\"score\":0.0597402},\r\n{\"type\":32, \"data\":[246,236,15],\"color\":[18,34,16,128],\"score\":0.0596865},\r\n{\"type\":32, \"data\":[466,36,6],\"color\":[255,255,255,128],\"score\":0.0596155},\r\n{\"type\":32, \"data\":[145,236,32],\"color\":[27,37,38,128],\"score\":0.0595531},\r\n{\"type\":32, \"data\":[429,42,8],\"color\":[182,180,180,128],\"score\":0.0594749},\r\n{\"type\":32, \"data\":[315,299,12],\"color\":[164,150,84,128],\"score\":0.0594111},\r\n{\"type\":32, \"data\":[466,69,4],\"color\":[255,255,255,128],\"score\":0.0593371},\r\n{\"type\":32, \"data\":[179,151,5],\"color\":[186,196,182,128],\"score\":0.0592672},\r\n{\"type\":32, \"data\":[222,320,10],\"color\":[66,102,0,128],\"score\":0.0591994},\r\n{\"type\":32, \"data\":[142,139,10],\"color\":[115,123,89,128],\"score\":0.0591411},\r\n{\"type\":32, \"data\":[581,549,7],\"color\":[195,213,234,128],\"score\":0.0590793},\r\n{\"type\":32, \"data\":[54,290,11],\"color\":[64,109,19,128],\"score\":0.0590245},\r\n{\"type\":32, \"data\":[459,263,31],\"color\":[54,78,17,128],\"score\":0.0589711},\r\n{\"type\":32, \"data\":[448,17,16],\"color\":[5,4,46,128],\"score\":0.0588971},\r\n{\"type\":32, \"data\":[518,361,6],\"color\":[116,139,24,128],\"score\":0.0588419},\r\n{\"type\":32, \"data\":[597,479,5],\"color\":[218,211,218,128],\"score\":0.058767},\r\n{\"type\":32, \"data\":[480,72,6],\"color\":[0,0,26,128],\"score\":0.0586855},\r\n{\"type\":32, \"data\":[534,54,13],\"color\":[5,4,45,128],\"score\":0.0586241},\r\n{\"type\":32, \"data\":[351,52,4],\"color\":[217,221,221,128],\"score\":0.0585633},\r\n{\"type\":32, \"data\":[305,132,32],\"color\":[51,56,27,128],\"score\":0.0585156},\r\n{\"type\":32, \"data\":[410,58,5],\"color\":[0,0,16,128],\"score\":0.0584563},\r\n{\"type\":32, \"data\":[448,70,3],\"color\":[255,255,255,128],\"score\":0.0584012},\r\n{\"type\":32, \"data\":[130,116,26],\"color\":[67,72,26,128],\"score\":0.0583485},\r\n{\"type\":32, \"data\":[341,488,24],\"color\":[115,94,66,128],\"score\":0.0582907},\r\n{\"type\":32, \"data\":[455,37,5],\"color\":[255,255,255,128],\"score\":0.0582223},\r\n{\"type\":32, \"data\":[358,83,13],\"color\":[9,9,41,128],\"score\":0.0581654},\r\n{\"type\":32, \"data\":[326,66,16],\"color\":[37,34,71,128],\"score\":0.0581103},\r\n{\"type\":32, \"data\":[36,237,19],\"color\":[40,60,29,128],\"score\":0.0580576},\r\n{\"type\":32, \"data\":[567,290,17],\"color\":[71,87,25,128],\"score\":0.0580024},\r\n{\"type\":32, \"data\":[616,292,29],\"color\":[34,56,9,128],\"score\":0.0579504},\r\n{\"type\":32, \"data\":[483,23,7],\"color\":[0,0,31,128],\"score\":0.057887},\r\n{\"type\":32, \"data\":[600,560,11],\"color\":[52,50,19,128],\"score\":0.0578357},\r\n{\"type\":32, \"data\":[152,201,9],\"color\":[69,97,22,128],\"score\":0.0577876},\r\n{\"type\":32, \"data\":[545,322,5],\"color\":[193,173,140,128],\"score\":0.057722},\r\n{\"type\":32, \"data\":[492,201,31],\"color\":[45,61,11,128],\"score\":0.0576679},\r\n{\"type\":32, \"data\":[415,274,32],\"color\":[60,83,17,128],\"score\":0.0576082},\r\n{\"type\":32, \"data\":[292,217,13],\"color\":[37,56,0,128],\"score\":0.0575607},\r\n{\"type\":32, \"data\":[262,346,9],\"color\":[63,90,10,128],\"score\":0.057516},\r\n{\"type\":32, \"data\":[640,429,23],\"color\":[56,66,29,128],\"score\":0.05746},\r\n{\"type\":32, \"data\":[687,426,24],\"color\":[68,82,23,128],\"score\":0.0574056},\r\n{\"type\":32, \"data\":[258,82,9],\"color\":[146,127,59,128],\"score\":0.0573548},\r\n{\"type\":32, \"data\":[291,283,12],\"color\":[205,172,132,128],\"score\":0.0572988},\r\n{\"type\":32, \"data\":[376,83,8],\"color\":[168,156,79,128],\"score\":0.057245},\r\n{\"type\":32, \"data\":[528,17,13],\"color\":[4,3,44,128],\"score\":0.0571902},\r\n{\"type\":32, \"data\":[537,108,4],\"color\":[255,249,223,128],\"score\":0.057117},\r\n{\"type\":32, \"data\":[212,166,6],\"color\":[141,155,139,128],\"score\":0.0570624},\r\n{\"type\":32, \"data\":[402,54,7],\"color\":[13,13,43,128],\"score\":0.0570115},\r\n{\"type\":32, \"data\":[417,370,14],\"color\":[65,102,5,128],\"score\":0.0569616},\r\n{\"type\":32, \"data\":[493,87,5],\"color\":[217,210,204,128],\"score\":0.0569128},\r\n{\"type\":32, \"data\":[312,456,19],\"color\":[157,125,75,128],\"score\":0.0568655},\r\n{\"type\":32, \"data\":[361,65,3],\"color\":[255,255,255,128],\"score\":0.0567972},\r\n{\"type\":32, \"data\":[188,518,12],\"color\":[98,114,36,128],\"score\":0.0567474},\r\n{\"type\":32, \"data\":[438,100,7],\"color\":[0,0,52,128],\"score\":0.0567002},\r\n{\"type\":32, \"data\":[694,352,26],\"color\":[65,78,27,128],\"score\":0.0566512},\r\n{\"type\":32, \"data\":[567,404,31],\"color\":[10,9,50,128],\"score\":0.0565711},\r\n{\"type\":32, \"data\":[481,333,4],\"color\":[37,224,238,128],\"score\":0.0565172},\r\n{\"type\":32, \"data\":[298,77,8],\"color\":[7,6,57,128],\"score\":0.0564615},\r\n{\"type\":32, \"data\":[702,288,7],\"color\":[135,118,35,128],\"score\":0.0564188},\r\n{\"type\":32, \"data\":[423,77,5],\"color\":[0,0,32,128],\"score\":0.0563495},\r\n{\"type\":32, \"data\":[317,93,11],\"color\":[143,126,70,128],\"score\":0.0562991},\r\n{\"type\":32, \"data\":[111,139,12],\"color\":[96,111,78,128],\"score\":0.0562571},\r\n{\"type\":32, \"data\":[629,249,10],\"color\":[114,118,43,128],\"score\":0.0562191},\r\n{\"type\":32, \"data\":[448,124,7],\"color\":[148,138,72,128],\"score\":0.0561786},\r\n{\"type\":32, \"data\":[432,51,10],\"color\":[65,63,59,128],\"score\":0.0561173},\r\n{\"type\":32, \"data\":[136,304,12],\"color\":[45,69,14,128],\"score\":0.0560697},\r\n{\"type\":32, \"data\":[476,120,12],\"color\":[0,0,49,128],\"score\":0.0560343},\r\n{\"type\":32, \"data\":[567,468,28],\"color\":[12,13,45,128],\"score\":0.0559819},\r\n{\"type\":32, \"data\":[333,540,10],\"color\":[55,85,13,128],\"score\":0.0559455},\r\n{\"type\":32, \"data\":[324,66,5],\"color\":[195,184,132,128],\"score\":0.0558847},\r\n{\"type\":32, \"data\":[411,78,4],\"color\":[255,255,210,128],\"score\":0.0558278},\r\n{\"type\":32, \"data\":[44,268,13],\"color\":[61,95,8,128],\"score\":0.0557812},\r\n{\"type\":32, \"data\":[81,242,29],\"color\":[8,6,52,128],\"score\":0.055735},\r\n{\"type\":32, \"data\":[389,75,5],\"color\":[0,0,39,128],\"score\":0.0556876},\r\n{\"type\":32, \"data\":[555,159,9],\"color\":[120,104,62,128],\"score\":0.0556427},\r\n{\"type\":32, \"data\":[553,11,20],\"color\":[11,10,50,128],\"score\":0.0555915},\r\n{\"type\":32, \"data\":[394,66,6],\"color\":[200,202,216,128],\"score\":0.055529},\r\n{\"type\":32, \"data\":[74,308,20],\"color\":[30,45,42,128],\"score\":0.0554911},\r\n{\"type\":32, \"data\":[489,37,9],\"color\":[246,244,246,128],\"score\":0.0554329},\r\n{\"type\":32, \"data\":[498,113,17],\"color\":[54,83,57,128],\"score\":0.0553883},\r\n{\"type\":32, \"data\":[269,94,7],\"color\":[0,0,44,128],\"score\":0.0553446},\r\n{\"type\":32, \"data\":[637,466,32],\"color\":[85,86,46,128],\"score\":0.055298},\r\n{\"type\":32, \"data\":[319,285,6],\"color\":[65,56,31,128],\"score\":0.0552584},\r\n{\"type\":32, \"data\":[458,51,9],\"color\":[113,107,62,128],\"score\":0.055215},\r\n{\"type\":32, \"data\":[309,44,8],\"color\":[0,0,36,128],\"score\":0.0551687},\r\n{\"type\":32, \"data\":[548,33,3],\"color\":[255,255,255,128],\"score\":0.0551274},\r\n{\"type\":32, \"data\":[602,207,7],\"color\":[68,95,0,128],\"score\":0.0550893},\r\n{\"type\":32, \"data\":[461,71,4],\"color\":[255,255,255,128],\"score\":0.0550305},\r\n{\"type\":32, \"data\":[174,473,10],\"color\":[181,129,89,128],\"score\":0.0549927},\r\n{\"type\":32, \"data\":[334,257,11],\"color\":[57,61,19,128],\"score\":0.0549439},\r\n{\"type\":32, \"data\":[260,420,14],\"color\":[88,97,47,128],\"score\":0.0549134},\r\n{\"type\":32, \"data\":[453,71,4],\"color\":[238,240,240,128],\"score\":0.0548791},\r\n{\"type\":32, \"data\":[444,386,11],\"color\":[87,115,17,128],\"score\":0.0548334},\r\n{\"type\":32, \"data\":[352,64,3],\"color\":[224,233,239,128],\"score\":0.0547887},\r\n{\"type\":32, \"data\":[399,115,24],\"color\":[87,83,45,128],\"score\":0.054748},\r\n{\"type\":32, \"data\":[456,88,16],\"color\":[98,86,65,128],\"score\":0.0546942},\r\n{\"type\":32, \"data\":[297,426,12],\"color\":[0,3,57,128],\"score\":0.0546551},\r\n{\"type\":32, \"data\":[573,365,7],\"color\":[184,150,113,128],\"score\":0.0545874},\r\n{\"type\":32, \"data\":[510,60,14],\"color\":[14,13,52,128],\"score\":0.0545381},\r\n{\"type\":32, \"data\":[604,454,14],\"color\":[137,116,89,128],\"score\":0.0544981},\r\n{\"type\":32, \"data\":[57,123,28],\"color\":[67,73,32,128],\"score\":0.0544608},\r\n{\"type\":32, \"data\":[407,240,27],\"color\":[59,82,23,128],\"score\":0.0544238},\r\n{\"type\":32, \"data\":[368,160,32],\"color\":[46,52,16,128],\"score\":0.054385},\r\n{\"type\":32, \"data\":[514,113,15],\"color\":[82,84,48,128],\"score\":0.0543471},\r\n{\"type\":32, \"data\":[455,26,8],\"color\":[3,2,45,128],\"score\":0.0543034},\r\n{\"type\":32, \"data\":[222,180,8],\"color\":[78,101,42,128],\"score\":0.0542678},\r\n{\"type\":32, \"data\":[326,237,10],\"color\":[176,149,110,128],\"score\":0.0542299},\r\n{\"type\":32, \"data\":[671,292,31],\"color\":[44,64,8,128],\"score\":0.0541928},\r\n{\"type\":32, \"data\":[97,144,5],\"color\":[158,165,155,128],\"score\":0.0541429},\r\n{\"type\":32, \"data\":[472,53,5],\"color\":[255,255,255,128],\"score\":0.054111},\r\n{\"type\":32, \"data\":[310,228,14],\"color\":[75,72,40,128],\"score\":0.0540538},\r\n{\"type\":32, \"data\":[416,58,5],\"color\":[0,0,36,128],\"score\":0.0540104},\r\n{\"type\":32, \"data\":[504,11,18],\"color\":[9,8,49,128],\"score\":0.0539693},\r\n{\"type\":32, \"data\":[423,194,31],\"color\":[35,48,15,128],\"score\":0.0539333},\r\n{\"type\":32, \"data\":[400,321,16],\"color\":[9,8,50,128],\"score\":0.0538976},\r\n{\"type\":32, \"data\":[515,92,4],\"color\":[203,211,217,128],\"score\":0.053858},\r\n{\"type\":32, \"data\":[167,252,7],\"color\":[76,118,0,128],\"score\":0.0538164},\r\n{\"type\":32, \"data\":[237,462,33],\"color\":[145,106,72,128],\"score\":0.0537747},\r\n{\"type\":32, \"data\":[379,65,4],\"color\":[255,255,255,128],\"score\":0.0537134},\r\n{\"type\":32, \"data\":[520,137,7],\"color\":[0,0,55,128],\"score\":0.0536823},\r\n{\"type\":32, \"data\":[244,418,7],\"color\":[0,1,48,128],\"score\":0.0536522},\r\n{\"type\":32, \"data\":[565,34,2],\"color\":[232,234,243,128],\"score\":0.0536189},\r\n{\"type\":32, \"data\":[425,50,4],\"color\":[240,244,228,128],\"score\":0.0535692},\r\n{\"type\":32, \"data\":[498,233,23],\"color\":[46,72,15,128],\"score\":0.053534},\r\n{\"type\":32, \"data\":[560,342,6],\"color\":[142,117,68,128],\"score\":0.0534939},\r\n{\"type\":32, \"data\":[201,161,4],\"color\":[186,191,189,128],\"score\":0.0534489},\r\n{\"type\":32, \"data\":[316,55,4],\"color\":[232,236,236,128],\"score\":0.05338},\r\n{\"type\":32, \"data\":[483,83,6],\"color\":[172,178,180,128],\"score\":0.0533345},\r\n{\"type\":32, \"data\":[435,71,4],\"color\":[255,255,255,128],\"score\":0.0532762},\r\n{\"type\":32, \"data\":[192,177,17],\"color\":[12,19,35,128],\"score\":0.0532467},\r\n{\"type\":32, \"data\":[366,97,11],\"color\":[7,22,60,128],\"score\":0.0532119},\r\n{\"type\":32, \"data\":[584,186,15],\"color\":[44,58,10,128],\"score\":0.0531775},\r\n{\"type\":32, \"data\":[300,312,5],\"color\":[167,145,118,128],\"score\":0.0531476},\r\n{\"type\":32, \"data\":[334,323,11],\"color\":[81,87,31,128],\"score\":0.0531155},\r\n{\"type\":32, \"data\":[506,37,9],\"color\":[255,255,249,128],\"score\":0.05306},\r\n{\"type\":32, \"data\":[406,68,4],\"color\":[0,0,30,128],\"score\":0.0530234},\r\n{\"type\":32, \"data\":[299,301,5],\"color\":[0,0,41,128],\"score\":0.0529828},\r\n{\"type\":32, \"data\":[423,70,4],\"color\":[255,255,253,128],\"score\":0.0529436},\r\n{\"type\":32, \"data\":[300,247,4],\"color\":[255,245,238,128],\"score\":0.0528974},\r\n{\"type\":32, \"data\":[280,503,12],\"color\":[203,141,98,128],\"score\":0.0528634},\r\n{\"type\":32, \"data\":[367,81,5],\"color\":[150,149,101,128],\"score\":0.0528308},\r\n{\"type\":32, \"data\":[348,113,23],\"color\":[75,74,43,128],\"score\":0.0528005},\r\n{\"type\":32, \"data\":[237,494,21],\"color\":[135,97,63,128],\"score\":0.0527673},\r\n{\"type\":32, \"data\":[23,282,15],\"color\":[3,0,56,128],\"score\":0.0527364},\r\n{\"type\":32, \"data\":[124,257,8],\"color\":[52,92,0,128],\"score\":0.0527007},\r\n{\"type\":32, \"data\":[465,410,11],\"color\":[47,66,32,128],\"score\":0.0526648},\r\n{\"type\":32, \"data\":[625,502,13],\"color\":[62,62,43,128],\"score\":0.0526355},\r\n{\"type\":32, \"data\":[257,257,11],\"color\":[55,61,15,128],\"score\":0.0525958},\r\n{\"type\":32, \"data\":[353,58,5],\"color\":[0,0,23,128],\"score\":0.0525453},\r\n{\"type\":32, \"data\":[335,83,6],\"color\":[178,164,105,128],\"score\":0.0525139},\r\n{\"type\":32, \"data\":[514,38,9],\"color\":[227,227,222,128],\"score\":0.0524683},\r\n{\"type\":32, \"data\":[555,34,3],\"color\":[255,255,255,128],\"score\":0.0524223},\r\n{\"type\":32, \"data\":[310,501,18],\"color\":[183,124,99,128],\"score\":0.052386},\r\n{\"type\":32, \"data\":[127,176,30],\"color\":[9,7,51,128],\"score\":0.0523512},\r\n{\"type\":32, \"data\":[460,85,8],\"color\":[192,173,125,128],\"score\":0.0522972},\r\n{\"type\":32, \"data\":[288,520,11],\"color\":[95,101,46,128],\"score\":0.0522653},\r\n{\"type\":32, \"data\":[428,75,4],\"color\":[0,0,30,128],\"score\":0.0522262},\r\n{\"type\":32, \"data\":[611,406,14],\"color\":[191,151,115,128],\"score\":0.0521877},\r\n{\"type\":32, \"data\":[393,43,4],\"color\":[212,213,221,128],\"score\":0.0521539},\r\n{\"type\":32, \"data\":[550,130,4],\"color\":[176,176,131,128],\"score\":0.0521164},\r\n{\"type\":32, \"data\":[390,65,3],\"color\":[0,0,9,128],\"score\":0.0520683},\r\n{\"type\":32, \"data\":[311,322,9],\"color\":[8,4,56,128],\"score\":0.0520393},\r\n{\"type\":32, \"data\":[238,192,4],\"color\":[150,152,126,128],\"score\":0.0520065},\r\n{\"type\":32, \"data\":[337,359,25],\"color\":[12,12,48,128],\"score\":0.0519763},\r\n{\"type\":32, \"data\":[194,155,3],\"color\":[226,230,210,128],\"score\":0.051933},\r\n{\"type\":32, \"data\":[600,574,4],\"color\":[165,178,177,128],\"score\":0.0518996},\r\n{\"type\":32, \"data\":[259,140,31],\"color\":[45,54,19,128],\"score\":0.0518717},\r\n{\"type\":32, \"data\":[504,70,16],\"color\":[7,6,50,128],\"score\":0.0518278},\r\n{\"type\":32, \"data\":[382,93,5],\"color\":[0,0,46,128],\"score\":0.05179},\r\n{\"type\":32, \"data\":[279,287,7],\"color\":[37,34,37,128],\"score\":0.0517545},\r\n{\"type\":32, \"data\":[623,352,28],\"color\":[38,60,10,128],\"score\":0.0517311},\r\n{\"type\":32, \"data\":[316,77,7],\"color\":[0,0,54,128],\"score\":0.0517003},\r\n{\"type\":32, \"data\":[127,141,2],\"color\":[255,255,255,128],\"score\":0.0516546},\r\n{\"type\":32, \"data\":[98,109,18],\"color\":[68,70,28,128],\"score\":0.0516272},\r\n{\"type\":32, \"data\":[359,504,13],\"color\":[68,77,24,128],\"score\":0.0515955},\r\n{\"type\":32, \"data\":[167,146,4],\"color\":[240,238,228,128],\"score\":0.0515581},\r\n{\"type\":32, \"data\":[405,73,2],\"color\":[0,0,0,128],\"score\":0.0515285},\r\n{\"type\":32, \"data\":[304,292,6],\"color\":[237,191,152,128],\"score\":0.0514957},\r\n{\"type\":32, \"data\":[332,55,10],\"color\":[0,0,41,128],\"score\":0.051465},\r\n{\"type\":32, \"data\":[482,7,23],\"color\":[10,9,50,128],\"score\":0.0514307},\r\n{\"type\":32, \"data\":[431,39,5],\"color\":[226,227,241,128],\"score\":0.0513913},\r\n{\"type\":32, \"data\":[199,307,9],\"color\":[41,71,5,128],\"score\":0.0513582},\r\n{\"type\":32, \"data\":[383,53,3],\"color\":[200,193,161,128],\"score\":0.0513312},\r\n{\"type\":32, \"data\":[571,507,15],\"color\":[8,13,43,128],\"score\":0.0513001},\r\n{\"type\":32, \"data\":[280,60,4],\"color\":[171,163,134,128],\"score\":0.051273},\r\n{\"type\":32, \"data\":[263,104,5],\"color\":[159,139,73,128],\"score\":0.051247},\r\n{\"type\":32, \"data\":[475,38,8],\"color\":[215,214,219,128],\"score\":0.0512144},\r\n{\"type\":32, \"data\":[489,345,11],\"color\":[45,95,65,128],\"score\":0.0511802},\r\n{\"type\":32, \"data\":[312,249,6],\"color\":[62,62,26,128],\"score\":0.0511498},\r\n{\"type\":32, \"data\":[443,60,4],\"color\":[224,218,194,128],\"score\":0.0511221},\r\n{\"type\":32, \"data\":[440,51,9],\"color\":[90,88,63,128],\"score\":0.0510972},\r\n{\"type\":32, \"data\":[147,141,7],\"color\":[143,143,128,128],\"score\":0.0510598},\r\n{\"type\":32, \"data\":[428,401,12],\"color\":[2,0,55,128],\"score\":0.0510343},\r\n{\"type\":32, \"data\":[468,76,3],\"color\":[0,0,24,128],\"score\":0.0510009},\r\n{\"type\":32, \"data\":[362,267,24],\"color\":[121,112,69,128],\"score\":0.0509734},\r\n{\"type\":32, \"data\":[148,488,21],\"color\":[10,11,50,128],\"score\":0.0509481},\r\n{\"type\":32, \"data\":[564,85,27],\"color\":[11,9,49,128],\"score\":0.0509221},\r\n{\"type\":32, \"data\":[323,309,10],\"color\":[75,87,29,128],\"score\":0.0508918},\r\n{\"type\":32, \"data\":[593,235,8],\"color\":[111,105,85,128],\"score\":0.0508547},\r\n{\"type\":32, \"data\":[252,222,8],\"color\":[35,70,0,128],\"score\":0.0508283},\r\n{\"type\":32, \"data\":[382,304,12],\"color\":[78,87,35,128],\"score\":0.0507969},\r\n{\"type\":32, \"data\":[560,591,31],\"color\":[10,9,49,128],\"score\":0.0507725},\r\n{\"type\":32, \"data\":[542,38,7],\"color\":[176,177,183,128],\"score\":0.0507392},\r\n{\"type\":32, \"data\":[281,84,9],\"color\":[118,107,59,128],\"score\":0.0507153},\r\n{\"type\":32, \"data\":[184,427,29],\"color\":[9,9,50,128],\"score\":0.0506829},\r\n{\"type\":32, \"data\":[534,219,10],\"color\":[51,93,1,128],\"score\":0.0506555},\r\n{\"type\":32, \"data\":[348,51,4],\"color\":[189,194,202,128],\"score\":0.0506217},\r\n{\"type\":32, \"data\":[505,132,7],\"color\":[0,0,56,128],\"score\":0.0505938},\r\n{\"type\":32, \"data\":[374,360,14],\"color\":[75,98,15,128],\"score\":0.050558},\r\n{\"type\":32, \"data\":[295,86,7],\"color\":[146,129,71,128],\"score\":0.0505319},\r\n{\"type\":32, \"data\":[598,472,4],\"color\":[195,189,197,128],\"score\":0.0504983},\r\n{\"type\":32, \"data\":[99,280,17],\"color\":[47,76,1,128],\"score\":0.0504727},\r\n{\"type\":32, \"data\":[547,361,16],\"color\":[10,11,48,128],\"score\":0.0504486},\r\n{\"type\":32, \"data\":[549,291,4],\"color\":[135,172,121,128],\"score\":0.0504251},\r\n{\"type\":32, \"data\":[218,458,16],\"color\":[175,121,85,128],\"score\":0.0503986},\r\n{\"type\":32, \"data\":[379,58,5],\"color\":[0,0,39,128],\"score\":0.0503739},\r\n{\"type\":32, \"data\":[444,70,3],\"color\":[255,255,252,128],\"score\":0.0503413},\r\n{\"type\":32, \"data\":[438,213,7],\"color\":[0,0,69,128],\"score\":0.0503186},\r\n{\"type\":32, \"data\":[699,392,28],\"color\":[89,88,47,128],\"score\":0.050297},\r\n{\"type\":32, \"data\":[605,507,19],\"color\":[117,99,67,128],\"score\":0.0502649},\r\n{\"type\":32, \"data\":[467,65,3],\"color\":[0,0,40,128],\"score\":0.0502266},\r\n{\"type\":32, \"data\":[245,196,3],\"color\":[166,168,158,128],\"score\":0.0501976},\r\n{\"type\":32, \"data\":[374,75,5],\"color\":[29,28,65,128],\"score\":0.0501696},\r\n{\"type\":32, \"data\":[544,120,5],\"color\":[0,0,34,128],\"score\":0.0501438},\r\n{\"type\":32, \"data\":[458,69,3],\"color\":[255,255,255,128],\"score\":0.0501103},\r\n{\"type\":32, \"data\":[439,37,3],\"color\":[251,251,255,128],\"score\":0.0500886},\r\n{\"type\":32, \"data\":[308,277,7],\"color\":[101,78,57,128],\"score\":0.0500649},\r\n{\"type\":32, \"data\":[603,438,11],\"color\":[149,125,95,128],\"score\":0.0500329},\r\n{\"type\":32, \"data\":[411,65,4],\"color\":[232,233,235,128],\"score\":0.0500012},\r\n{\"type\":32, \"data\":[551,112,5],\"color\":[198,197,177,128],\"score\":0.0499697},\r\n{\"type\":32, \"data\":[318,271,9],\"color\":[213,155,127,128],\"score\":0.0499365},\r\n{\"type\":32, \"data\":[248,81,8],\"color\":[119,105,58,128],\"score\":0.0499075},\r\n{\"type\":32, \"data\":[490,140,5],\"color\":[132,112,45,128],\"score\":0.0498847},\r\n{\"type\":32, \"data\":[414,34,7],\"color\":[24,22,62,128],\"score\":0.0498581},\r\n{\"type\":32, \"data\":[650,274,8],\"color\":[106,106,43,128],\"score\":0.0498362},\r\n{\"type\":32, \"data\":[66,270,14],\"color\":[3,6,59,128],\"score\":0.0498122},\r\n{\"type\":32, \"data\":[535,34,4],\"color\":[255,255,252,128],\"score\":0.0497841},\r\n{\"type\":32, \"data\":[495,50,5],\"color\":[122,135,123,128],\"score\":0.0497532},\r\n{\"type\":32, \"data\":[268,269,9],\"color\":[109,101,48,128],\"score\":0.0497248},\r\n{\"type\":32, \"data\":[409,50,4],\"color\":[113,121,86,128],\"score\":0.0497001},\r\n{\"type\":32, \"data\":[119,146,2],\"color\":[238,251,248,128],\"score\":0.0496744},\r\n{\"type\":32, \"data\":[239,356,6],\"color\":[27,115,107,128],\"score\":0.0496443},\r\n{\"type\":32, \"data\":[455,185,13],\"color\":[62,69,10,128],\"score\":0.0496194},\r\n{\"type\":32, \"data\":[476,41,2],\"color\":[23,21,49,128],\"score\":0.0495944},\r\n{\"type\":32, \"data\":[158,170,22],\"color\":[10,10,50,128],\"score\":0.0495594},\r\n{\"type\":32, \"data\":[770,364,13],\"color\":[8,10,47,128],\"score\":0.0495388},\r\n{\"type\":32, \"data\":[570,217,20],\"color\":[13,12,54,128],\"score\":0.0495095},\r\n{\"type\":32, \"data\":[149,124,13],\"color\":[39,50,11,128],\"score\":0.0494849},\r\n{\"type\":32, \"data\":[478,68,5],\"color\":[1,3,59,128],\"score\":0.0494554},\r\n{\"type\":32, \"data\":[587,565,7],\"color\":[132,139,125,128],\"score\":0.0494319},\r\n{\"type\":32, \"data\":[547,127,3],\"color\":[219,214,204,128],\"score\":0.0494038},\r\n{\"type\":32, \"data\":[237,438,17],\"color\":[121,111,62,128],\"score\":0.0493747},\r\n{\"type\":32, \"data\":[302,475,9],\"color\":[216,164,119,128],\"score\":0.0493519},\r\n{\"type\":32, \"data\":[218,225,29],\"color\":[9,7,52,128],\"score\":0.0493231},\r\n{\"type\":32, \"data\":[281,245,17],\"color\":[141,121,88,128],\"score\":0.0492947},\r\n{\"type\":32, \"data\":[361,52,3],\"color\":[214,208,158,128],\"score\":0.0492633},\r\n{\"type\":32, \"data\":[441,65,3],\"color\":[0,0,35,128],\"score\":0.0492367},\r\n{\"type\":32, \"data\":[425,87,3],\"color\":[255,255,215,128],\"score\":0.0492016},\r\n{\"type\":32, \"data\":[307,55,4],\"color\":[196,197,196,128],\"score\":0.0491743},\r\n{\"type\":32, \"data\":[623,558,17],\"color\":[4,9,52,128],\"score\":0.0491431},\r\n{\"type\":32, \"data\":[587,542,4],\"color\":[207,217,223,128],\"score\":0.0491223},\r\n{\"type\":32, \"data\":[332,75,4],\"color\":[0,0,27,128],\"score\":0.0490965},\r\n{\"type\":32, \"data\":[228,119,22],\"color\":[74,72,35,128],\"score\":0.0490736},\r\n{\"type\":32, \"data\":[676,338,23],\"color\":[35,62,9,128],\"score\":0.0490525},\r\n{\"type\":32, \"data\":[355,51,3],\"color\":[231,233,207,128],\"score\":0.0490206},\r\n{\"type\":32, \"data\":[435,84,6],\"color\":[236,212,149,128],\"score\":0.048991},\r\n{\"type\":32, \"data\":[429,66,3],\"color\":[0,0,52,128],\"score\":0.0489661},\r\n{\"type\":32, \"data\":[729,347,26],\"color\":[89,80,45,128],\"score\":0.0489447},\r\n{\"type\":32, \"data\":[553,223,8],\"color\":[53,83,8,128],\"score\":0.0489219},\r\n{\"type\":32, \"data\":[537,339,15],\"color\":[8,5,53,128],\"score\":0.0488968},\r\n{\"type\":32, \"data\":[207,511,12],\"color\":[76,64,33,128],\"score\":0.0488742},\r\n{\"type\":32, \"data\":[722,316,19],\"color\":[55,76,14,128],\"score\":0.0488475},\r\n{\"type\":32, \"data\":[72,144,21],\"color\":[56,68,23,128],\"score\":0.0488253},\r\n{\"type\":32, \"data\":[173,85,16],\"color\":[6,5,53,128],\"score\":0.048801},\r\n{\"type\":32, \"data\":[548,304,3],\"color\":[213,219,196,128],\"score\":0.0487678},\r\n{\"type\":32, \"data\":[328,164,24],\"color\":[45,60,18,128],\"score\":0.0487459},\r\n{\"type\":32, \"data\":[527,68,24],\"color\":[14,14,53,128],\"score\":0.0487146},\r\n{\"type\":32, \"data\":[401,62,2],\"color\":[255,255,255,128],\"score\":0.0486788},\r\n{\"type\":32, \"data\":[468,316,7],\"color\":[93,99,13,128],\"score\":0.0486532},\r\n{\"type\":32, \"data\":[200,141,13],\"color\":[34,47,11,128],\"score\":0.0486317},\r\n{\"type\":32, \"data\":[290,296,5],\"color\":[179,158,110,128],\"score\":0.0486107},\r\n{\"type\":32, \"data\":[407,86,4],\"color\":[0,0,43,128],\"score\":0.0485888},\r\n{\"type\":32, \"data\":[304,69,5],\"color\":[171,155,113,128],\"score\":0.0485641},\r\n{\"type\":32, \"data\":[258,93,5],\"color\":[0,0,51,128],\"score\":0.0485394},\r\n{\"type\":32, \"data\":[575,400,23],\"color\":[11,10,50,128],\"score\":0.0485134},\r\n{\"type\":32, \"data\":[526,303,21],\"color\":[12,10,52,128],\"score\":0.0484859},\r\n{\"type\":32, \"data\":[440,60,4],\"color\":[232,222,190,128],\"score\":0.0484593},\r\n{\"type\":32, \"data\":[370,221,23],\"color\":[82,94,42,128],\"score\":0.0484415},\r\n{\"type\":32, \"data\":[107,141,7],\"color\":[23,44,0,128],\"score\":0.0484149},\r\n{\"type\":32, \"data\":[315,415,5],\"color\":[99,102,1,128],\"score\":0.0483915},\r\n{\"type\":32, \"data\":[464,70,4],\"color\":[255,255,255,128],\"score\":0.0483673},\r\n{\"type\":32, \"data\":[317,402,7],\"color\":[19,83,89,128],\"score\":0.0483478},\r\n{\"type\":32, \"data\":[263,464,25],\"color\":[139,102,70,128],\"score\":0.0483292},\r\n{\"type\":32, \"data\":[447,76,4],\"color\":[0,3,65,128],\"score\":0.0483043},\r\n{\"type\":32, \"data\":[398,81,5],\"color\":[211,214,184,128],\"score\":0.0482782},\r\n{\"type\":32, \"data\":[554,332,6],\"color\":[118,98,69,128],\"score\":0.0482587},\r\n{\"type\":32, \"data\":[264,502,12],\"color\":[165,106,63,128],\"score\":0.0482393},\r\n{\"type\":32, \"data\":[377,455,24],\"color\":[9,9,49,128],\"score\":0.0482198},\r\n{\"type\":32, \"data\":[523,118,16],\"color\":[97,86,49,128],\"score\":0.0481919},\r\n{\"type\":32, \"data\":[420,47,5],\"color\":[219,223,211,128],\"score\":0.0481713},\r\n{\"type\":32, \"data\":[118,217,32],\"color\":[9,7,51,128],\"score\":0.0481507},\r\n{\"type\":32, \"data\":[416,67,5],\"color\":[255,255,243,128],\"score\":0.0481228},\r\n{\"type\":32, \"data\":[420,37,2],\"color\":[255,255,255,128],\"score\":0.0481003},\r\n{\"type\":32, \"data\":[664,369,12],\"color\":[85,87,37,128],\"score\":0.048084},\r\n{\"type\":32, \"data\":[423,96,7],\"color\":[0,0,51,128],\"score\":0.0480562},\r\n{\"type\":32, \"data\":[37,224,5],\"color\":[88,128,25,128],\"score\":0.0480344},\r\n{\"type\":32, \"data\":[203,410,28],\"color\":[10,11,50,128],\"score\":0.0480166},\r\n{\"type\":32, \"data\":[62,164,10],\"color\":[30,37,48,128],\"score\":0.0479995},\r\n{\"type\":32, \"data\":[559,116,3],\"color\":[229,229,209,128],\"score\":0.0479709},\r\n{\"type\":32, \"data\":[357,66,2],\"color\":[255,255,250,128],\"score\":0.0479418},\r\n{\"type\":32, \"data\":[435,66,2],\"color\":[0,0,11,128],\"score\":0.0479219},\r\n{\"type\":32, \"data\":[100,120,13],\"color\":[37,50,12,128],\"score\":0.0479007},\r\n{\"type\":32, \"data\":[473,75,3],\"color\":[0,0,40,128],\"score\":0.0478723},\r\n{\"type\":32, \"data\":[515,53,3],\"color\":[156,154,136,128],\"score\":0.0478439},\r\n{\"type\":32, \"data\":[202,537,14],\"color\":[6,6,49,128],\"score\":0.0478217},\r\n{\"type\":32, \"data\":[371,55,2],\"color\":[234,228,176,128],\"score\":0.0478003},\r\n{\"type\":32, \"data\":[391,368,8],\"color\":[80,108,16,128],\"score\":0.0477789},\r\n{\"type\":32, \"data\":[411,44,4],\"color\":[255,255,255,128],\"score\":0.0477556},\r\n{\"type\":32, \"data\":[294,68,3],\"color\":[225,217,174,128],\"score\":0.0477317},\r\n{\"type\":32, \"data\":[428,70,3],\"color\":[254,255,242,128],\"score\":0.047696},\r\n{\"type\":32, \"data\":[529,98,6],\"color\":[176,183,180,128],\"score\":0.0476709},\r\n{\"type\":32, \"data\":[271,62,4],\"color\":[157,149,125,128],\"score\":0.0476488},\r\n{\"type\":32, \"data\":[269,69,6],\"color\":[3,4,61,128],\"score\":0.0476305},\r\n{\"type\":32, \"data\":[302,316,3],\"color\":[237,196,146,128],\"score\":0.0476064},\r\n{\"type\":32, \"data\":[541,41,5],\"color\":[82,82,107,128],\"score\":0.0475846},\r\n{\"type\":32, \"data\":[438,325,25],\"color\":[12,12,48,128],\"score\":0.047562},\r\n{\"type\":32, \"data\":[321,53,1],\"color\":[255,255,255,128],\"score\":0.0475385},\r\n{\"type\":32, \"data\":[304,75,6],\"color\":[7,6,49,128],\"score\":0.0475196},\r\n{\"type\":32, \"data\":[272,216,7],\"color\":[144,131,82,128],\"score\":0.0474947},\r\n{\"type\":32, \"data\":[130,72,24],\"color\":[9,8,51,128],\"score\":0.0474717},\r\n{\"type\":32, \"data\":[200,471,20],\"color\":[143,101,70,128],\"score\":0.0474571},\r\n{\"type\":32, \"data\":[111,148,2],\"color\":[235,245,238,128],\"score\":0.0474341},\r\n{\"type\":32, \"data\":[587,313,32],\"color\":[36,59,10,128],\"score\":0.0474184},\r\n{\"type\":32, \"data\":[336,68,4],\"color\":[172,160,99,128],\"score\":0.0473901},\r\n{\"type\":32, \"data\":[52,126,4],\"color\":[0,0,53,128],\"score\":0.0473723},\r\n{\"type\":32, \"data\":[377,36,15],\"color\":[16,15,55,128],\"score\":0.0473565},\r\n{\"type\":32, \"data\":[341,73,4],\"color\":[0,0,26,128],\"score\":0.047334},\r\n{\"type\":32, \"data\":[587,369,10],\"color\":[138,113,71,128],\"score\":0.047315},\r\n{\"type\":32, \"data\":[268,359,6],\"color\":[44,73,3,128],\"score\":0.0472974},\r\n{\"type\":32, \"data\":[247,94,6],\"color\":[0,0,49,128],\"score\":0.047273},\r\n{\"type\":32, \"data\":[218,342,4],\"color\":[77,136,55,128],\"score\":0.0472522},\r\n{\"type\":32, \"data\":[137,310,32],\"color\":[21,26,41,128],\"score\":0.0472368},\r\n{\"type\":32, \"data\":[453,76,3],\"color\":[0,0,24,128],\"score\":0.0472039},\r\n{\"type\":32, \"data\":[83,315,5],\"color\":[98,121,9,128],\"score\":0.0471755},\r\n{\"type\":32, \"data\":[350,316,9],\"color\":[191,158,116,128],\"score\":0.0471542},\r\n{\"type\":32, \"data\":[560,285,8],\"color\":[96,113,52,128],\"score\":0.0471318},\r\n{\"type\":32, \"data\":[436,76,3],\"color\":[34,31,76,128],\"score\":0.0471116},\r\n{\"type\":32, \"data\":[555,43,7],\"color\":[15,14,53,128],\"score\":0.0470922},\r\n{\"type\":32, \"data\":[455,127,10],\"color\":[73,67,59,128],\"score\":0.0470766},\r\n{\"type\":32, \"data\":[363,73,5],\"color\":[0,0,38,128],\"score\":0.0470513},\r\n{\"type\":32, \"data\":[310,201,11],\"color\":[151,132,87,128],\"score\":0.0470297},\r\n{\"type\":32, \"data\":[434,4,30],\"color\":[11,10,50,128],\"score\":0.0470094},\r\n{\"type\":32, \"data\":[252,535,24],\"color\":[10,10,50,128],\"score\":0.0469862},\r\n{\"type\":32, \"data\":[564,8,24],\"color\":[10,9,50,128],\"score\":0.0469614},\r\n{\"type\":32, \"data\":[620,530,6],\"color\":[0,0,45,128],\"score\":0.046944},\r\n{\"type\":32, \"data\":[516,95,6],\"color\":[158,158,148,128],\"score\":0.0469255},\r\n{\"type\":32, \"data\":[411,73,3],\"color\":[0,0,46,128],\"score\":0.046902},\r\n{\"type\":32, \"data\":[429,354,8],\"color\":[60,102,1,128],\"score\":0.0468827},\r\n{\"type\":32, \"data\":[426,42,2],\"color\":[0,0,21,128],\"score\":0.0468559},\r\n{\"type\":32, \"data\":[339,472,18],\"color\":[110,98,61,128],\"score\":0.0468394},\r\n{\"type\":32, \"data\":[27,144,6],\"color\":[45,100,46,128],\"score\":0.0468188},\r\n{\"type\":32, \"data\":[474,69,1],\"color\":[255,255,255,128],\"score\":0.0468034},\r\n{\"type\":32, \"data\":[28,232,9],\"color\":[0,0,60,128],\"score\":0.0467869},\r\n{\"type\":32, \"data\":[436,81,5],\"color\":[201,189,148,128],\"score\":0.0467646},\r\n{\"type\":32, \"data\":[499,114,6],\"color\":[0,65,81,128],\"score\":0.0467516},\r\n{\"type\":32, \"data\":[313,309,4],\"color\":[212,179,136,128],\"score\":0.0467278},\r\n{\"type\":32, \"data\":[488,48,3],\"color\":[97,111,92,128],\"score\":0.0467084},\r\n{\"type\":32, \"data\":[547,0,31],\"color\":[11,10,50,128],\"score\":0.0466834},\r\n{\"type\":32, \"data\":[592,555,9],\"color\":[124,102,53,128],\"score\":0.0466655},\r\n{\"type\":32, \"data\":[313,63,5],\"color\":[0,0,44,128],\"score\":0.0466389},\r\n{\"type\":32, \"data\":[467,364,19],\"color\":[9,6,51,128],\"score\":0.0466217},\r\n{\"type\":32, \"data\":[490,99,12],\"color\":[83,88,64,128],\"score\":0.0466013},\r\n{\"type\":32, \"data\":[585,487,6],\"color\":[47,68,0,128],\"score\":0.0465808},\r\n{\"type\":32, \"data\":[589,523,4],\"color\":[165,169,161,128],\"score\":0.0465612},\r\n{\"type\":32, \"data\":[607,478,9],\"color\":[111,91,61,128],\"score\":0.0465433},\r\n{\"type\":32, \"data\":[488,60,4],\"color\":[0,0,23,128],\"score\":0.0465238},\r\n{\"type\":32, \"data\":[565,253,7],\"color\":[83,117,47,128],\"score\":0.0465053},\r\n{\"type\":32, \"data\":[539,147,10],\"color\":[0,0,53,128],\"score\":0.0464833},\r\n{\"type\":32, \"data\":[374,350,10],\"color\":[93,102,37,128],\"score\":0.0464701},\r\n{\"type\":32, \"data\":[260,70,4],\"color\":[0,0,46,128],\"score\":0.0464551},\r\n{\"type\":32, \"data\":[527,361,4],\"color\":[81,120,12,128],\"score\":0.0464357},\r\n{\"type\":32, \"data\":[440,70,2],\"color\":[255,255,255,128],\"score\":0.0464142},\r\n{\"type\":32, \"data\":[496,37,9],\"color\":[235,235,235,128],\"score\":0.0463926},\r\n{\"type\":32, \"data\":[395,74,2],\"color\":[0,0,14,128],\"score\":0.0463672},\r\n{\"type\":32, \"data\":[342,79,3],\"color\":[217,210,182,128],\"score\":0.0463395},\r\n{\"type\":32, \"data\":[304,55,3],\"color\":[160,165,178,128],\"score\":0.0463217},\r\n{\"type\":32, \"data\":[315,468,16],\"color\":[167,128,90,128],\"score\":0.0463049},\r\n{\"type\":32, \"data\":[486,309,17],\"color\":[8,9,52,128],\"score\":0.0462875},\r\n{\"type\":32, \"data\":[405,340,22],\"color\":[10,10,51,128],\"score\":0.0462662},\r\n{\"type\":32, \"data\":[303,307,3],\"color\":[0,0,29,128],\"score\":0.0462396},\r\n{\"type\":32, \"data\":[442,82,3],\"color\":[0,0,43,128],\"score\":0.0462186},\r\n{\"type\":32, \"data\":[462,119,6],\"color\":[0,0,49,128],\"score\":0.0461937},\r\n{\"type\":32, \"data\":[333,224,12],\"color\":[150,133,90,128],\"score\":0.0461733},\r\n{\"type\":32, \"data\":[436,44,3],\"color\":[2,1,40,128],\"score\":0.0461548},\r\n{\"type\":32, \"data\":[357,35,14],\"color\":[7,6,48,128],\"score\":0.0461364},\r\n{\"type\":32, \"data\":[316,539,11],\"color\":[62,90,25,128],\"score\":0.0461202},\r\n{\"type\":32, \"data\":[497,91,7],\"color\":[165,156,135,128],\"score\":0.046103},\r\n{\"type\":32, \"data\":[373,47,4],\"color\":[88,90,116,128],\"score\":0.0460861},\r\n{\"type\":32, \"data\":[345,196,15],\"color\":[92,100,49,128],\"score\":0.0460703},\r\n{\"type\":32, \"data\":[560,169,12],\"color\":[78,74,30,128],\"score\":0.0460537},\r\n{\"type\":32, \"data\":[470,71,2],\"color\":[255,255,255,128],\"score\":0.0460317},\r\n{\"type\":32, \"data\":[497,130,6],\"color\":[0,0,48,128],\"score\":0.0460126},\r\n{\"type\":32, \"data\":[304,87,6],\"color\":[152,129,74,128],\"score\":0.045997},\r\n{\"type\":32, \"data\":[458,65,2],\"color\":[0,0,6,128],\"score\":0.0459762},\r\n{\"type\":32, \"data\":[323,76,6],\"color\":[0,0,42,128],\"score\":0.0459557},\r\n{\"type\":32, \"data\":[148,106,10],\"color\":[77,79,31,128],\"score\":0.045938},\r\n{\"type\":32, \"data\":[174,149,3],\"color\":[182,188,168,128],\"score\":0.0459234},\r\n{\"type\":32, \"data\":[583,534,5],\"color\":[179,190,198,128],\"score\":0.0459073},\r\n{\"type\":32, \"data\":[373,533,17],\"color\":[8,6,51,128],\"score\":0.0458923},\r\n{\"type\":32, \"data\":[494,6,23],\"color\":[10,9,50,128],\"score\":0.0458772},\r\n{\"type\":32, \"data\":[419,83,5],\"color\":[0,0,45,128],\"score\":0.0458586},\r\n{\"type\":32, \"data\":[401,74,2],\"color\":[0,0,42,128],\"score\":0.0458408},\r\n{\"type\":32, \"data\":[360,82,2],\"color\":[255,247,175,128],\"score\":0.0458098},\r\n{\"type\":32, \"data\":[419,114,15],\"color\":[94,87,57,128],\"score\":0.0457938},\r\n{\"type\":32, \"data\":[479,88,8],\"color\":[94,88,60,128],\"score\":0.0457729},\r\n{\"type\":32, \"data\":[466,404,9],\"color\":[1,0,53,128],\"score\":0.045758},\r\n{\"type\":32, \"data\":[289,495,6],\"color\":[243,220,163,128],\"score\":0.0457417},\r\n{\"type\":32, \"data\":[296,419,14],\"color\":[7,4,49,128],\"score\":0.045728},\r\n{\"type\":32, \"data\":[277,417,9],\"color\":[70,89,41,128],\"score\":0.0457101},\r\n{\"type\":32, \"data\":[394,66,2],\"color\":[0,0,7,128],\"score\":0.0456846},\r\n{\"type\":32, \"data\":[593,574,3],\"color\":[157,183,190,128],\"score\":0.0456639},\r\n{\"type\":32, \"data\":[190,161,5],\"color\":[8,30,0,128],\"score\":0.0456474},\r\n{\"type\":32, \"data\":[305,31,22],\"color\":[10,9,50,128],\"score\":0.0456292},\r\n{\"type\":32, \"data\":[380,324,5],\"color\":[162,158,85,128],\"score\":0.0456125},\r\n{\"type\":32, \"data\":[447,61,3],\"color\":[233,235,221,128],\"score\":0.0455933},\r\n{\"type\":32, \"data\":[544,109,3],\"color\":[251,255,244,128],\"score\":0.0455697},\r\n{\"type\":32, \"data\":[121,139,5],\"color\":[131,134,109,128],\"score\":0.0455518},\r\n{\"type\":32, \"data\":[458,74,3],\"color\":[0,0,50,128],\"score\":0.0455361},\r\n{\"type\":32, \"data\":[566,350,7],\"color\":[115,106,53,128],\"score\":0.0455199},\r\n{\"type\":32, \"data\":[350,436,17],\"color\":[10,8,52,128],\"score\":0.0455047},\r\n{\"type\":32, \"data\":[190,152,2],\"color\":[231,226,231,128],\"score\":0.0454826},\r\n{\"type\":32, \"data\":[515,346,2],\"color\":[83,247,201,128],\"score\":0.0454583},\r\n{\"type\":32, \"data\":[476,102,12],\"color\":[22,53,59,128],\"score\":0.0454416},\r\n{\"type\":32, \"data\":[264,118,6],\"color\":[5,1,57,128],\"score\":0.0454258},\r\n{\"type\":32, \"data\":[761,330,15],\"color\":[100,93,49,128],\"score\":0.0454116},\r\n{\"type\":32, \"data\":[178,143,7],\"color\":[63,66,20,128],\"score\":0.0453939},\r\n{\"type\":32, \"data\":[547,310,1],\"color\":[255,255,255,128],\"score\":0.0453747},\r\n{\"type\":32, \"data\":[275,95,6],\"color\":[0,0,49,128],\"score\":0.0453565},\r\n{\"type\":32, \"data\":[204,164,2],\"color\":[211,228,218,128],\"score\":0.045339},\r\n{\"type\":32, \"data\":[385,64,3],\"color\":[0,0,25,128],\"score\":0.0453182},\r\n{\"type\":32, \"data\":[483,165,8],\"color\":[0,0,58,128],\"score\":0.0452993},\r\n{\"type\":32, \"data\":[276,147,31],\"color\":[45,60,14,128],\"score\":0.0452863},\r\n{\"type\":32, \"data\":[416,77,2],\"color\":[255,255,236,128],\"score\":0.0452641},\r\n{\"type\":32, \"data\":[396,104,5],\"color\":[0,28,37,128],\"score\":0.0452491},\r\n{\"type\":32, \"data\":[352,74,7],\"color\":[0,0,48,128],\"score\":0.0452327},\r\n{\"type\":32, \"data\":[257,105,8],\"color\":[118,106,52,128],\"score\":0.0452151},\r\n{\"type\":32, \"data\":[384,73,4],\"color\":[0,0,47,128],\"score\":0.0451969},\r\n{\"type\":32, \"data\":[430,56,4],\"color\":[0,0,42,128],\"score\":0.0451753},\r\n{\"type\":32, \"data\":[651,477,16],\"color\":[70,83,28,128],\"score\":0.0451607},\r\n{\"type\":32, \"data\":[32,111,5],\"color\":[0,0,60,128],\"score\":0.0451448},\r\n{\"type\":32, \"data\":[306,312,3],\"color\":[0,0,40,128],\"score\":0.0451244},\r\n{\"type\":32, \"data\":[556,567,24],\"color\":[12,12,50,128],\"score\":0.0451075},\r\n{\"type\":32, \"data\":[336,296,4],\"color\":[255,213,165,128],\"score\":0.0450918},\r\n{\"type\":32, \"data\":[463,75,2],\"color\":[0,0,14,128],\"score\":0.0450695},\r\n{\"type\":32, \"data\":[93,318,5],\"color\":[73,99,19,128],\"score\":0.0450491},\r\n{\"type\":32, \"data\":[580,552,6],\"color\":[172,186,192,128],\"score\":0.0450298},\r\n{\"type\":32, \"data\":[270,79,5],\"color\":[139,125,65,128],\"score\":0.045012},\r\n{\"type\":32, \"data\":[469,42,1],\"color\":[0,0,8,128],\"score\":0.0449957},\r\n{\"type\":32, \"data\":[355,322,6],\"color\":[205,184,138,128],\"score\":0.0449824},\r\n{\"type\":32, \"data\":[407,69,4],\"color\":[4,4,54,128],\"score\":0.0449662},\r\n{\"type\":32, \"data\":[293,303,3],\"color\":[210,168,115,128],\"score\":0.0449507},\r\n{\"type\":32, \"data\":[319,88,7],\"color\":[144,128,82,128],\"score\":0.0449355},\r\n{\"type\":32, \"data\":[249,312,12],\"color\":[8,6,51,128],\"score\":0.0449213},\r\n{\"type\":32, \"data\":[282,276,5],\"color\":[233,192,144,128],\"score\":0.0449021},\r\n{\"type\":32, \"data\":[599,468,3],\"color\":[190,196,204,128],\"score\":0.0448846},\r\n{\"type\":32, \"data\":[290,74,4],\"color\":[0,0,49,128],\"score\":0.0448655},\r\n{\"type\":32, \"data\":[321,438,13],\"color\":[93,85,43,128],\"score\":0.0448505},\r\n{\"type\":32, \"data\":[505,188,25],\"color\":[47,54,18,128],\"score\":0.0448368},\r\n{\"type\":32, \"data\":[484,337,3],\"color\":[19,186,212,128],\"score\":0.0448181},\r\n{\"type\":32, \"data\":[290,315,8],\"color\":[10,10,50,128],\"score\":0.0448037},\r\n{\"type\":32, \"data\":[384,141,18],\"color\":[61,54,24,128],\"score\":0.0447895},\r\n{\"type\":32, \"data\":[268,64,4],\"color\":[132,123,91,128],\"score\":0.0447746},\r\n{\"type\":32, \"data\":[566,115,3],\"color\":[160,175,137,128],\"score\":0.0447515},\r\n{\"type\":32, \"data\":[450,234,10],\"color\":[72,92,29,128],\"score\":0.0447365},\r\n{\"type\":32, \"data\":[391,61,2],\"color\":[255,255,255,128],\"score\":0.044716},\r\n{\"type\":32, \"data\":[590,336,26],\"color\":[33,55,10,128],\"score\":0.0446993},\r\n{\"type\":32, \"data\":[545,323,3],\"color\":[220,208,160,128],\"score\":0.0446836},\r\n{\"type\":32, \"data\":[545,206,11],\"color\":[17,33,32,128],\"score\":0.0446713},\r\n{\"type\":32, \"data\":[62,308,5],\"color\":[71,98,3,128],\"score\":0.0446537},\r\n{\"type\":32, \"data\":[460,227,5],\"color\":[0,0,63,128],\"score\":0.0446413},\r\n{\"type\":32, \"data\":[413,69,3],\"color\":[255,255,238,128],\"score\":0.044615},\r\n{\"type\":32, \"data\":[427,85,4],\"color\":[253,242,226,128],\"score\":0.0445895},\r\n{\"type\":32, \"data\":[593,484,3],\"color\":[176,179,188,128],\"score\":0.0445731},\r\n{\"type\":32, \"data\":[473,333,6],\"color\":[0,0,49,128],\"score\":0.0445567},\r\n{\"type\":32, \"data\":[483,80,2],\"color\":[255,255,255,128],\"score\":0.0445409},\r\n{\"type\":32, \"data\":[420,178,17],\"color\":[47,57,12,128],\"score\":0.044528},\r\n{\"type\":32, \"data\":[561,122,4],\"color\":[6,4,41,128],\"score\":0.0445139},\r\n{\"type\":32, \"data\":[285,60,3],\"color\":[184,177,140,128],\"score\":0.0444945},\r\n{\"type\":32, \"data\":[566,534,12],\"color\":[9,11,44,128],\"score\":0.0444796},\r\n{\"type\":32, \"data\":[437,237,5],\"color\":[0,0,68,128],\"score\":0.0444605},\r\n{\"type\":32, \"data\":[130,141,2],\"color\":[219,228,228,128],\"score\":0.0444399},\r\n{\"type\":32, \"data\":[551,368,16],\"color\":[11,11,49,128],\"score\":0.0444268},\r\n{\"type\":32, \"data\":[552,320,7],\"color\":[62,72,11,128],\"score\":0.0444058},\r\n{\"type\":32, \"data\":[227,460,16],\"color\":[170,116,82,128],\"score\":0.0443948},\r\n{\"type\":32, \"data\":[373,59,3],\"color\":[0,0,28,128],\"score\":0.0443787},\r\n{\"type\":32, \"data\":[373,80,5],\"color\":[159,150,99,128],\"score\":0.0443632},\r\n{\"type\":32, \"data\":[307,261,4],\"color\":[58,53,31,128],\"score\":0.044342},\r\n{\"type\":32, \"data\":[418,408,21],\"color\":[10,8,50,128],\"score\":0.0443286},\r\n{\"type\":32, \"data\":[473,266,20],\"color\":[50,76,12,128],\"score\":0.0443166},\r\n{\"type\":32, \"data\":[339,92,9],\"color\":[116,110,49,128],\"score\":0.0443044},\r\n{\"type\":32, \"data\":[185,151,4],\"color\":[140,144,133,128],\"score\":0.0442903},\r\n{\"type\":32, \"data\":[428,81,2],\"color\":[255,255,248,128],\"score\":0.0442762},\r\n{\"type\":32, \"data\":[472,34,4],\"color\":[249,249,241,128],\"score\":0.0442605},\r\n{\"type\":32, \"data\":[591,206,7],\"color\":[60,81,5,128],\"score\":0.0442438},\r\n{\"type\":32, \"data\":[456,69,3],\"color\":[255,255,255,128],\"score\":0.0442282},\r\n{\"type\":32, \"data\":[328,115,20],\"color\":[64,62,39,128],\"score\":0.0442143},\r\n{\"type\":32, \"data\":[520,37,8],\"color\":[223,223,221,128],\"score\":0.0441925},\r\n{\"type\":32, \"data\":[44,240,6],\"color\":[61,97,1,128],\"score\":0.044178},\r\n{\"type\":32, \"data\":[603,538,12],\"color\":[119,101,57,128],\"score\":0.0441616},\r\n{\"type\":32, \"data\":[613,249,12],\"color\":[82,102,29,128],\"score\":0.0441486},\r\n{\"type\":32, \"data\":[95,304,9],\"color\":[5,0,55,128],\"score\":0.0441367},\r\n{\"type\":32, \"data\":[568,441,24],\"color\":[11,9,51,128],\"score\":0.0441224},\r\n{\"type\":32, \"data\":[449,279,25],\"color\":[54,76,14,128],\"score\":0.0441089},\r\n{\"type\":32, \"data\":[445,153,19],\"color\":[9,7,53,128],\"score\":0.0440961},\r\n{\"type\":32, \"data\":[514,135,5],\"color\":[0,0,52,128],\"score\":0.0440833},\r\n{\"type\":32, \"data\":[282,44,14],\"color\":[9,8,49,128],\"score\":0.0440699},\r\n{\"type\":32, \"data\":[693,432,17],\"color\":[53,66,23,128],\"score\":0.0440565},\r\n{\"type\":32, \"data\":[599,378,9],\"color\":[151,120,89,128],\"score\":0.0440415},\r\n{\"type\":32, \"data\":[630,508,7],\"color\":[15,20,50,128],\"score\":0.0440288},\r\n{\"type\":32, \"data\":[603,413,7],\"color\":[203,165,136,128],\"score\":0.0440071},\r\n{\"type\":32, \"data\":[270,276,3],\"color\":[188,164,99,128],\"score\":0.0439966},\r\n{\"type\":32, \"data\":[254,65,2],\"color\":[182,178,171,128],\"score\":0.0439822},\r\n{\"type\":32, \"data\":[509,118,6],\"color\":[128,121,68,128],\"score\":0.043971},\r\n{\"type\":32, \"data\":[470,416,4],\"color\":[94,134,17,128],\"score\":0.0439544},\r\n{\"type\":32, \"data\":[580,266,21],\"color\":[70,87,27,128],\"score\":0.043942},\r\n{\"type\":32, \"data\":[113,103,9],\"color\":[100,88,45,128],\"score\":0.0439292},\r\n{\"type\":32, \"data\":[630,461,10],\"color\":[116,104,71,128],\"score\":0.0439174},\r\n{\"type\":32, \"data\":[275,60,2],\"color\":[234,230,205,128],\"score\":0.0438981},\r\n{\"type\":32, \"data\":[292,60,4],\"color\":[0,0,40,128],\"score\":0.0438786},\r\n{\"type\":32, \"data\":[441,75,2],\"color\":[0,0,14,128],\"score\":0.0438608},\r\n{\"type\":32, \"data\":[281,551,24],\"color\":[10,11,49,128],\"score\":0.0438465},\r\n{\"type\":32, \"data\":[379,281,16],\"color\":[112,106,55,128],\"score\":0.0438351},\r\n{\"type\":32, \"data\":[470,54,5],\"color\":[252,255,255,128],\"score\":0.0438147},\r\n{\"type\":32, \"data\":[507,96,2],\"color\":[255,255,255,128],\"score\":0.0437937},\r\n{\"type\":32, \"data\":[25,120,4],\"color\":[103,114,53,128],\"score\":0.0437791},\r\n{\"type\":32, \"data\":[602,374,4],\"color\":[39,35,44,128],\"score\":0.0437657},\r\n{\"type\":32, \"data\":[248,196,3],\"color\":[153,153,140,128],\"score\":0.0437475},\r\n{\"type\":32, \"data\":[87,155,3],\"color\":[157,170,110,128],\"score\":0.0437255},\r\n{\"type\":32, \"data\":[308,62,4],\"color\":[0,0,44,128],\"score\":0.0437096},\r\n{\"type\":32, \"data\":[161,146,4],\"color\":[232,234,231,128],\"score\":0.0436845},\r\n{\"type\":32, \"data\":[3,267,25],\"color\":[10,8,51,128],\"score\":0.043674},\r\n{\"type\":32, \"data\":[317,259,4],\"color\":[247,179,141,128],\"score\":0.0436563},\r\n{\"type\":32, \"data\":[204,179,12],\"color\":[19,30,32,128],\"score\":0.0436416},\r\n{\"type\":32, \"data\":[456,343,5],\"color\":[52,89,36,128],\"score\":0.0436291},\r\n{\"type\":32, \"data\":[40,138,9],\"color\":[80,91,23,128],\"score\":0.0436172},\r\n{\"type\":32, \"data\":[23,303,24],\"color\":[10,8,50,128],\"score\":0.043606},\r\n{\"type\":32, \"data\":[254,69,4],\"color\":[0,0,49,128],\"score\":0.0435899},\r\n{\"type\":32, \"data\":[275,39,20],\"color\":[10,9,50,128],\"score\":0.0435785},\r\n{\"type\":32, \"data\":[653,559,4],\"color\":[92,97,39,128],\"score\":0.0435621},\r\n{\"type\":32, \"data\":[447,54,3],\"color\":[192,196,190,128],\"score\":0.0435449},\r\n{\"type\":32, \"data\":[342,58,1],\"color\":[253,255,238,128],\"score\":0.0435316},\r\n{\"type\":32, \"data\":[153,215,7],\"color\":[55,74,34,128],\"score\":0.0435198},\r\n{\"type\":32, \"data\":[396,62,2],\"color\":[255,255,255,128],\"score\":0.0435021},\r\n{\"type\":32, \"data\":[545,315,5],\"color\":[110,115,45,128],\"score\":0.0434893},\r\n{\"type\":32, \"data\":[409,50,3],\"color\":[98,101,77,128],\"score\":0.0434789},\r\n{\"type\":32, \"data\":[461,400,7],\"color\":[3,0,53,128],\"score\":0.0434668},\r\n{\"type\":32, \"data\":[163,233,9],\"color\":[44,62,32,128],\"score\":0.0434531},\r\n{\"type\":32, \"data\":[456,106,9],\"color\":[106,100,62,128],\"score\":0.0434399},\r\n{\"type\":32, \"data\":[233,525,10],\"color\":[5,6,49,128],\"score\":0.0434253},\r\n{\"type\":32, \"data\":[428,37,3],\"color\":[255,255,254,128],\"score\":0.0434074},\r\n{\"type\":32, \"data\":[521,93,3],\"color\":[173,186,208,128],\"score\":0.0433972},\r\n{\"type\":32, \"data\":[418,297,11],\"color\":[49,77,9,128],\"score\":0.0433847},\r\n{\"type\":32, \"data\":[275,248,5],\"color\":[187,165,121,128],\"score\":0.0433727},\r\n{\"type\":32, \"data\":[328,285,4],\"color\":[68,66,32,128],\"score\":0.043357},\r\n{\"type\":32, \"data\":[226,131,9],\"color\":[97,90,58,128],\"score\":0.043344},\r\n{\"type\":32, \"data\":[506,154,18],\"color\":[80,75,35,128],\"score\":0.0433298},\r\n{\"type\":32, \"data\":[413,239,21],\"color\":[60,83,22,128],\"score\":0.0433185},\r\n{\"type\":32, \"data\":[581,558,2],\"color\":[198,209,209,128],\"score\":0.0433089},\r\n{\"type\":32, \"data\":[77,129,14],\"color\":[45,55,12,128],\"score\":0.0432986},\r\n{\"type\":32, \"data\":[401,70,2],\"color\":[255,255,255,128],\"score\":0.0432716},\r\n{\"type\":32, \"data\":[362,338,7],\"color\":[178,142,106,128],\"score\":0.0432589},\r\n{\"type\":32, \"data\":[668,455,20],\"color\":[80,85,40,128],\"score\":0.0432435},\r\n{\"type\":32, \"data\":[357,250,14],\"color\":[118,119,72,128],\"score\":0.043233},\r\n{\"type\":32, \"data\":[303,253,4],\"color\":[215,185,159,128],\"score\":0.0432204},\r\n{\"type\":32, \"data\":[402,78,3],\"color\":[255,255,226,128],\"score\":0.0432008},\r\n{\"type\":32, \"data\":[26,129,6],\"color\":[0,3,54,128],\"score\":0.0431891},\r\n{\"type\":32, \"data\":[342,63,4],\"color\":[0,0,38,128],\"score\":0.0431771},\r\n{\"type\":32, \"data\":[62,168,3],\"color\":[111,136,52,128],\"score\":0.0431628},\r\n{\"type\":32, \"data\":[461,36,5],\"color\":[218,218,225,128],\"score\":0.0431478},\r\n{\"type\":32, \"data\":[162,504,11],\"color\":[6,6,50,128],\"score\":0.043135},\r\n{\"type\":32, \"data\":[354,65,1],\"color\":[255,255,255,128],\"score\":0.0431235},\r\n{\"type\":32, \"data\":[394,70,3],\"color\":[254,253,241,128],\"score\":0.043103},\r\n{\"type\":32, \"data\":[340,268,7],\"color\":[69,66,33,128],\"score\":0.0430894},\r\n{\"type\":32, \"data\":[614,445,5],\"color\":[80,66,45,128],\"score\":0.0430786},\r\n{\"type\":32, \"data\":[306,300,3],\"color\":[220,178,136,128],\"score\":0.0430673},\r\n{\"type\":32, \"data\":[303,232,7],\"color\":[129,117,76,128],\"score\":0.0430544},\r\n{\"type\":32, \"data\":[50,104,8],\"color\":[100,98,47,128],\"score\":0.0430395},\r\n{\"type\":32, \"data\":[550,99,10],\"color\":[11,11,49,128],\"score\":0.0430254},\r\n{\"type\":32, \"data\":[501,49,2],\"color\":[41,51,35,128],\"score\":0.0430115},\r\n{\"type\":32, \"data\":[313,55,4],\"color\":[201,202,201,128],\"score\":0.0429942},\r\n{\"type\":32, \"data\":[345,538,8],\"color\":[44,52,8,128],\"score\":0.0429803},\r\n{\"type\":32, \"data\":[329,499,10],\"color\":[128,95,70,128],\"score\":0.0429691},\r\n{\"type\":32, \"data\":[481,327,3],\"color\":[12,179,170,128],\"score\":0.0429517},\r\n{\"type\":32, \"data\":[373,73,3],\"color\":[0,0,27,128],\"score\":0.0429357},\r\n{\"type\":32, \"data\":[336,283,9],\"color\":[140,118,89,128],\"score\":0.0429241},\r\n{\"type\":32, \"data\":[599,461,3],\"color\":[179,169,179,128],\"score\":0.042911},\r\n{\"type\":32, \"data\":[184,488,9],\"color\":[170,118,86,128],\"score\":0.0428986},\r\n{\"type\":32, \"data\":[496,353,4],\"color\":[86,100,9,128],\"score\":0.0428853},\r\n{\"type\":32, \"data\":[748,380,11],\"color\":[74,89,18,128],\"score\":0.0428748},\r\n{\"type\":32, \"data\":[622,401,5],\"color\":[116,92,58,128],\"score\":0.0428646},\r\n{\"type\":32, \"data\":[483,62,2],\"color\":[233,235,243,128],\"score\":0.0428462},\r\n{\"type\":32, \"data\":[275,69,6],\"color\":[7,7,57,128],\"score\":0.0428319},\r\n{\"type\":32, \"data\":[413,88,6],\"color\":[0,0,47,128],\"score\":0.0428176},\r\n{\"type\":32, \"data\":[585,528,5],\"color\":[129,142,130,128],\"score\":0.042807},\r\n{\"type\":32, \"data\":[490,84,4],\"color\":[214,221,234,128],\"score\":0.0427847},\r\n{\"type\":32, \"data\":[128,154,11],\"color\":[5,7,49,128],\"score\":0.0427726},\r\n{\"type\":32, \"data\":[364,289,9],\"color\":[165,128,103,128],\"score\":0.0427608},\r\n{\"type\":32, \"data\":[224,77,19],\"color\":[10,10,51,128],\"score\":0.0427485},\r\n{\"type\":32, \"data\":[471,66,2],\"color\":[0,0,43,128],\"score\":0.0427359},\r\n{\"type\":32, \"data\":[267,469,9],\"color\":[106,87,61,128],\"score\":0.0427243},\r\n{\"type\":32, \"data\":[547,111,3],\"color\":[255,254,253,128],\"score\":0.0427073},\r\n{\"type\":32, \"data\":[380,77,2],\"color\":[221,219,230,128],\"score\":0.042694},\r\n{\"type\":32, \"data\":[471,70,2],\"color\":[255,255,255,128],\"score\":0.0426788},\r\n{\"type\":32, \"data\":[301,69,5],\"color\":[157,146,105,128],\"score\":0.0426678},\r\n{\"type\":32, \"data\":[433,75,2],\"color\":[0,0,8,128],\"score\":0.0426483},\r\n{\"type\":32, \"data\":[590,242,3],\"color\":[0,0,37,128],\"score\":0.0426337},\r\n{\"type\":32, \"data\":[156,198,6],\"color\":[70,103,13,128],\"score\":0.0426184},\r\n{\"type\":32, \"data\":[545,303,3],\"color\":[108,120,44,128],\"score\":0.0426075},\r\n{\"type\":32, \"data\":[520,102,5],\"color\":[87,75,46,128],\"score\":0.0425969},\r\n{\"type\":32, \"data\":[447,66,2],\"color\":[0,0,16,128],\"score\":0.0425771},\r\n{\"type\":32, \"data\":[393,24,16],\"color\":[10,9,49,128],\"score\":0.0425664},\r\n{\"type\":32, \"data\":[370,327,3],\"color\":[45,57,28,128],\"score\":0.0425523},\r\n{\"type\":32, \"data\":[460,134,2],\"color\":[178,172,84,128],\"score\":0.0425408},\r\n{\"type\":32, \"data\":[194,112,15],\"color\":[65,71,27,128],\"score\":0.0425292},\r\n{\"type\":32, \"data\":[368,53,3],\"color\":[184,176,121,128],\"score\":0.0425105},\r\n{\"type\":32, \"data\":[395,90,9],\"color\":[87,86,65,128],\"score\":0.0425003},\r\n{\"type\":32, \"data\":[59,223,18],\"color\":[10,8,51,128],\"score\":0.0424891},\r\n{\"type\":32, \"data\":[316,70,3],\"color\":[163,149,88,128],\"score\":0.0424726},\r\n{\"type\":32, \"data\":[478,80,2],\"color\":[255,255,255,128],\"score\":0.0424495},\r\n{\"type\":32, \"data\":[304,61,3],\"color\":[0,0,27,128],\"score\":0.0424366},\r\n{\"type\":32, \"data\":[297,292,3],\"color\":[255,255,200,128],\"score\":0.0424152},\r\n{\"type\":32, \"data\":[223,356,12],\"color\":[9,7,52,128],\"score\":0.0424027},\r\n{\"type\":32, \"data\":[263,239,7],\"color\":[112,99,57,128],\"score\":0.0423919},\r\n{\"type\":32, \"data\":[386,55,1],\"color\":[255,255,217,128],\"score\":0.0423802},\r\n{\"type\":32, \"data\":[254,335,7],\"color\":[34,57,0,128],\"score\":0.0423703},\r\n{\"type\":32, \"data\":[460,70,3],\"color\":[255,255,255,128],\"score\":0.0423581},\r\n{\"type\":32, \"data\":[740,402,9],\"color\":[76,87,28,128],\"score\":0.0423462},\r\n{\"type\":32, \"data\":[392,49,3],\"color\":[1,1,55,128],\"score\":0.0423362},\r\n{\"type\":32, \"data\":[415,45,3],\"color\":[255,255,255,128],\"score\":0.0423235},\r\n{\"type\":32, \"data\":[320,334,9],\"color\":[5,2,54,128],\"score\":0.0423131},\r\n{\"type\":32, \"data\":[70,311,4],\"color\":[68,102,4,128],\"score\":0.0423018},\r\n{\"type\":32, \"data\":[129,130,2],\"color\":[187,189,178,128],\"score\":0.0422856},\r\n{\"type\":32, \"data\":[322,292,5],\"color\":[172,141,97,128],\"score\":0.0422737},\r\n{\"type\":32, \"data\":[576,371,3],\"color\":[185,145,115,128],\"score\":0.0422608},\r\n{\"type\":32, \"data\":[426,38,3],\"color\":[232,231,232,128],\"score\":0.0422482},\r\n{\"type\":32, \"data\":[344,330,7],\"color\":[84,82,35,128],\"score\":0.042236},\r\n{\"type\":32, \"data\":[303,185,11],\"color\":[76,100,34,128],\"score\":0.0422244},\r\n{\"type\":32, \"data\":[244,416,8],\"color\":[4,9,49,128],\"score\":0.0422127},\r\n{\"type\":32, \"data\":[441,78,2],\"color\":[255,251,182,128],\"score\":0.042197},\r\n{\"type\":32, \"data\":[318,52,1],\"color\":[255,255,255,128],\"score\":0.0421856},\r\n{\"type\":32, \"data\":[393,45,3],\"color\":[210,211,202,128],\"score\":0.0421715},\r\n{\"type\":32, \"data\":[458,411,5],\"color\":[63,94,14,128],\"score\":0.0421598},\r\n{\"type\":32, \"data\":[532,5,25],\"color\":[11,10,50,128],\"score\":0.0421457},\r\n{\"type\":32, \"data\":[449,360,15],\"color\":[8,2,52,128],\"score\":0.0421336},\r\n{\"type\":32, \"data\":[44,128,4],\"color\":[0,0,59,128],\"score\":0.0421222},\r\n{\"type\":32, \"data\":[490,240,19],\"color\":[50,71,20,128],\"score\":0.042112},\r\n{\"type\":32, \"data\":[451,65,2],\"color\":[0,0,14,128],\"score\":0.0420929},\r\n{\"type\":32, \"data\":[129,115,13],\"color\":[47,57,11,128],\"score\":0.0420827},\r\n{\"type\":32, \"data\":[75,102,10],\"color\":[97,90,46,128],\"score\":0.0420714},\r\n{\"type\":32, \"data\":[384,78,2],\"color\":[186,198,184,128],\"score\":0.0420581},\r\n{\"type\":32, \"data\":[147,145,2],\"color\":[247,249,254,128],\"score\":0.0420399},\r\n{\"type\":32, \"data\":[104,134,2],\"color\":[192,192,188,128],\"score\":0.0420268},\r\n{\"type\":32, \"data\":[297,56,1],\"color\":[255,255,255,128],\"score\":0.04201},\r\n{\"type\":32, \"data\":[35,221,6],\"color\":[60,94,37,128],\"score\":0.0419992},\r\n{\"type\":32, \"data\":[361,60,3],\"color\":[0,0,30,128],\"score\":0.0419853},\r\n{\"type\":32, \"data\":[236,159,20],\"color\":[37,52,16,128],\"score\":0.0419741},\r\n{\"type\":32, \"data\":[490,351,4],\"color\":[94,112,4,128],\"score\":0.0419622},\r\n{\"type\":32, \"data\":[547,135,3],\"color\":[0,0,36,128],\"score\":0.0419518},\r\n{\"type\":32, \"data\":[606,570,5],\"color\":[116,113,63,128],\"score\":0.0419399},\r\n{\"type\":32, \"data\":[346,78,1],\"color\":[226,221,235,128],\"score\":0.041928},\r\n{\"type\":32, \"data\":[567,425,28],\"color\":[11,10,50,128],\"score\":0.0419155},\r\n{\"type\":32, \"data\":[329,271,4],\"color\":[212,182,137,128],\"score\":0.0419047},\r\n{\"type\":32, \"data\":[480,60,1],\"color\":[0,0,48,128],\"score\":0.0418952},\r\n{\"type\":32, \"data\":[236,93,6],\"color\":[0,0,57,128],\"score\":0.0418835},\r\n{\"type\":32, \"data\":[657,421,22],\"color\":[61,73,28,128],\"score\":0.0418738},\r\n{\"type\":32, \"data\":[589,502,2],\"color\":[148,172,178,128],\"score\":0.0418656},\r\n{\"type\":32, \"data\":[590,377,4],\"color\":[185,163,121,128],\"score\":0.041855},\r\n{\"type\":32, \"data\":[471,78,1],\"color\":[255,255,255,128],\"score\":0.0418418},\r\n{\"type\":32, \"data\":[384,93,5],\"color\":[0,0,51,128],\"score\":0.0418249},\r\n{\"type\":32, \"data\":[551,34,3],\"color\":[255,255,252,128],\"score\":0.0418069},\r\n{\"type\":32, \"data\":[151,207,4],\"color\":[102,134,28,128],\"score\":0.0417958},\r\n{\"type\":32, \"data\":[599,261,12],\"color\":[83,95,30,128],\"score\":0.0417873},\r\n{\"type\":32, \"data\":[349,63,1],\"color\":[255,255,255,128],\"score\":0.0417694},\r\n{\"type\":32, \"data\":[694,241,25],\"color\":[10,9,50,128],\"score\":0.0417601},\r\n{\"type\":32, \"data\":[596,478,3],\"color\":[224,227,233,128],\"score\":0.0417466},\r\n{\"type\":32, \"data\":[142,173,27],\"color\":[12,11,50,128],\"score\":0.0417336},\r\n{\"type\":32, \"data\":[495,100,6],\"color\":[57,71,50,128],\"score\":0.0417238},\r\n{\"type\":32, \"data\":[180,153,3],\"color\":[201,211,212,128],\"score\":0.041707},\r\n{\"type\":32, \"data\":[289,67,4],\"color\":[164,159,120,128],\"score\":0.0416913},\r\n{\"type\":32, \"data\":[447,38,5],\"color\":[224,225,230,128],\"score\":0.0416795},\r\n{\"type\":32, \"data\":[447,127,5],\"color\":[145,135,66,128],\"score\":0.0416643},\r\n{\"type\":32, \"data\":[404,320,15],\"color\":[9,7,51,128],\"score\":0.041654},\r\n{\"type\":32, \"data\":[404,369,6],\"color\":[69,103,12,128],\"score\":0.0416454},\r\n{\"type\":32, \"data\":[297,74,5],\"color\":[1,2,45,128],\"score\":0.0416279},\r\n{\"type\":32, \"data\":[31,104,3],\"color\":[121,122,52,128],\"score\":0.0416135},\r\n{\"type\":32, \"data\":[451,70,3],\"color\":[255,255,252,128],\"score\":0.041599},\r\n{\"type\":32, \"data\":[676,309,30],\"color\":[36,58,11,128],\"score\":0.0415885},\r\n{\"type\":32, \"data\":[417,40,2],\"color\":[0,0,7,128],\"score\":0.0415726},\r\n{\"type\":32, \"data\":[329,68,3],\"color\":[182,164,85,128],\"score\":0.0415599},\r\n{\"type\":32, \"data\":[431,66,2],\"color\":[0,0,26,128],\"score\":0.0415512},\r\n{\"type\":32, \"data\":[527,140,5],\"color\":[0,0,52,128],\"score\":0.0415381},\r\n{\"type\":32, \"data\":[446,47,5],\"color\":[103,101,75,128],\"score\":0.0415237},\r\n{\"type\":32, \"data\":[330,525,14],\"color\":[108,96,65,128],\"score\":0.0415137},\r\n{\"type\":32, \"data\":[600,435,7],\"color\":[169,142,114,128],\"score\":0.0415023},\r\n{\"type\":32, \"data\":[627,269,16],\"color\":[40,61,12,128],\"score\":0.0414893},\r\n{\"type\":32, \"data\":[180,523,7],\"color\":[49,71,11,128],\"score\":0.0414802},\r\n{\"type\":32, \"data\":[292,112,13],\"color\":[65,65,44,128],\"score\":0.0414694},\r\n{\"type\":32, \"data\":[492,341,7],\"color\":[0,42,96,128],\"score\":0.0414579},\r\n{\"type\":32, \"data\":[461,60,4],\"color\":[188,180,142,128],\"score\":0.0414462},\r\n{\"type\":32, \"data\":[379,65,3],\"color\":[250,251,242,128],\"score\":0.0414359},\r\n{\"type\":32, \"data\":[441,35,3],\"color\":[222,223,227,128],\"score\":0.0414254},\r\n{\"type\":32, \"data\":[469,89,2],\"color\":[222,209,136,128],\"score\":0.0414151},\r\n{\"type\":32, \"data\":[467,48,3],\"color\":[112,105,62,128],\"score\":0.0414003},\r\n{\"type\":32, \"data\":[76,299,11],\"color\":[4,1,55,128],\"score\":0.0413899},\r\n{\"type\":32, \"data\":[475,137,2],\"color\":[198,183,96,128],\"score\":0.0413704},\r\n{\"type\":32, \"data\":[452,15,18],\"color\":[11,10,50,128],\"score\":0.0413593},\r\n{\"type\":32, \"data\":[531,48,6],\"color\":[0,0,39,128],\"score\":0.0413491},\r\n{\"type\":32, \"data\":[443,66,2],\"color\":[0,0,32,128],\"score\":0.0413377},\r\n{\"type\":32, \"data\":[101,152,6],\"color\":[0,5,45,128],\"score\":0.0413239},\r\n{\"type\":32, \"data\":[290,440,7],\"color\":[106,98,57,128],\"score\":0.0413152},\r\n{\"type\":32, \"data\":[391,56,3],\"color\":[133,124,78,128],\"score\":0.0413056},\r\n{\"type\":32, \"data\":[708,479,27],\"color\":[10,9,50,128],\"score\":0.0412952},\r\n{\"type\":32, \"data\":[205,317,8],\"color\":[29,49,19,128],\"score\":0.0412861},\r\n{\"type\":32, \"data\":[428,76,3],\"color\":[0,0,36,128],\"score\":0.0412736},\r\n{\"type\":32, \"data\":[416,74,2],\"color\":[0,0,12,128],\"score\":0.0412486},\r\n{\"type\":32, \"data\":[308,529,11],\"color\":[107,96,53,128],\"score\":0.0412385},\r\n{\"type\":32, \"data\":[164,171,20],\"color\":[10,9,51,128],\"score\":0.0412291},\r\n{\"type\":32, \"data\":[433,62,2],\"color\":[236,233,211,128],\"score\":0.0412166},\r\n{\"type\":32, \"data\":[572,547,6],\"color\":[51,65,74,128],\"score\":0.0412038},\r\n{\"type\":32, \"data\":[408,79,4],\"color\":[231,216,168,128],\"score\":0.0411908},\r\n{\"type\":32, \"data\":[365,65,3],\"color\":[212,219,222,128],\"score\":0.0411763},\r\n{\"type\":32, \"data\":[315,230,8],\"color\":[60,63,27,128],\"score\":0.0411626},\r\n{\"type\":32, \"data\":[293,210,10],\"color\":[40,56,11,128],\"score\":0.041154},\r\n{\"type\":32, \"data\":[486,39,9],\"color\":[219,219,221,128],\"score\":0.041141},\r\n{\"type\":32, \"data\":[374,95,6],\"color\":[2,0,53,128],\"score\":0.0411318},\r\n{\"type\":32, \"data\":[594,370,8],\"color\":[111,93,52,128],\"score\":0.0411201},\r\n{\"type\":32, \"data\":[541,118,6],\"color\":[31,30,30,128],\"score\":0.041105},\r\n{\"type\":32, \"data\":[772,324,7],\"color\":[113,112,56,128],\"score\":0.0410928},\r\n{\"type\":32, \"data\":[583,200,5],\"color\":[0,0,69,128],\"score\":0.041081},\r\n{\"type\":32, \"data\":[147,257,14],\"color\":[7,4,53,128],\"score\":0.041073},\r\n{\"type\":32, \"data\":[513,3,26],\"color\":[11,10,50,128],\"score\":0.0410632},\r\n{\"type\":32, \"data\":[465,313,6],\"color\":[89,109,28,128],\"score\":0.0410512},\r\n{\"type\":32, \"data\":[234,332,10],\"color\":[68,89,29,128],\"score\":0.0410423},\r\n{\"type\":32, \"data\":[467,129,2],\"color\":[219,197,126,128],\"score\":0.0410219},\r\n{\"type\":32, \"data\":[49,172,1],\"color\":[207,233,115,128],\"score\":0.0410106},\r\n{\"type\":32, \"data\":[36,248,4],\"color\":[0,0,66,128],\"score\":0.0410014},\r\n{\"type\":32, \"data\":[505,96,2],\"color\":[255,255,255,128],\"score\":0.0409902},\r\n{\"type\":32, \"data\":[538,127,7],\"color\":[97,84,52,128],\"score\":0.0409818},\r\n{\"type\":32, \"data\":[310,28,24],\"color\":[11,10,50,128],\"score\":0.0409734},\r\n{\"type\":32, \"data\":[549,299,2],\"color\":[222,237,228,128],\"score\":0.040956},\r\n{\"type\":32, \"data\":[479,73,5],\"color\":[0,0,51,128],\"score\":0.0409444},\r\n{\"type\":32, \"data\":[356,349,7],\"color\":[0,0,52,128],\"score\":0.0409332},\r\n{\"type\":32, \"data\":[348,56,3],\"color\":[0,0,40,128],\"score\":0.0409213},\r\n{\"type\":32, \"data\":[425,76,4],\"color\":[0,0,49,128],\"score\":0.0409102},\r\n{\"type\":32, \"data\":[117,284,5],\"color\":[70,104,12,128],\"score\":0.0409004},\r\n{\"type\":32, \"data\":[419,49,2],\"color\":[80,81,50,128],\"score\":0.0408866},\r\n{\"type\":32, \"data\":[471,342,4],\"color\":[87,101,1,128],\"score\":0.0408753},\r\n{\"type\":32, \"data\":[553,152,4],\"color\":[117,108,70,128],\"score\":0.0408663},\r\n{\"type\":32, \"data\":[433,384,8],\"color\":[66,88,13,128],\"score\":0.0408565},\r\n{\"type\":32, \"data\":[94,234,28],\"color\":[11,10,50,128],\"score\":0.040845},\r\n{\"type\":32, \"data\":[488,70,9],\"color\":[14,13,53,128],\"score\":0.0408335},\r\n{\"type\":32, \"data\":[49,114,3],\"color\":[0,0,48,128],\"score\":0.0408235},\r\n{\"type\":32, \"data\":[522,115,3],\"color\":[0,9,44,128],\"score\":0.040813},\r\n{\"type\":32, \"data\":[476,300,10],\"color\":[8,5,51,128],\"score\":0.0408047},\r\n{\"type\":32, \"data\":[425,57,3],\"color\":[0,0,40,128],\"score\":0.0407924},\r\n{\"type\":32, \"data\":[35,90,13],\"color\":[9,8,50,128],\"score\":0.0407842},\r\n{\"type\":32, \"data\":[589,535,2],\"color\":[212,220,236,128],\"score\":0.0407746},\r\n{\"type\":32, \"data\":[717,405,12],\"color\":[74,83,30,128],\"score\":0.0407645},\r\n{\"type\":32, \"data\":[568,358,4],\"color\":[138,116,73,128],\"score\":0.040755},\r\n{\"type\":32, \"data\":[672,478,6],\"color\":[0,0,50,128],\"score\":0.0407423},\r\n{\"type\":32, \"data\":[286,511,7],\"color\":[180,118,92,128],\"score\":0.0407317},\r\n{\"type\":32, \"data\":[478,411,4],\"color\":[67,94,37,128],\"score\":0.0407204},\r\n{\"type\":32, \"data\":[731,321,18],\"color\":[59,73,19,128],\"score\":0.0407109},\r\n{\"type\":32, \"data\":[49,251,6],\"color\":[50,77,0,128],\"score\":0.0407034},\r\n{\"type\":32, \"data\":[539,44,1],\"color\":[255,255,255,128],\"score\":0.0406893},\r\n{\"type\":32, \"data\":[166,149,1],\"color\":[0,49,0,128],\"score\":0.0406802},\r\n{\"type\":32, \"data\":[356,296,5],\"color\":[220,178,127,128],\"score\":0.0406698},\r\n{\"type\":32, \"data\":[201,169,5],\"color\":[30,66,0,128],\"score\":0.04066},\r\n{\"type\":32, \"data\":[516,318,25],\"color\":[11,9,50,128],\"score\":0.040651},\r\n{\"type\":32, \"data\":[536,344,18],\"color\":[11,10,50,128],\"score\":0.04064},\r\n{\"type\":32, \"data\":[422,18,17],\"color\":[10,9,49,128],\"score\":0.0406286},\r\n{\"type\":32, \"data\":[777,399,25],\"color\":[10,10,50,128],\"score\":0.04062},\r\n{\"type\":32, \"data\":[581,504,6],\"color\":[29,52,16,128],\"score\":0.0406112},\r\n{\"type\":32, \"data\":[593,491,3],\"color\":[166,167,177,128],\"score\":0.0405954},\r\n{\"type\":32, \"data\":[363,72,5],\"color\":[4,3,50,128],\"score\":0.0405847},\r\n{\"type\":32, \"data\":[153,145,2],\"color\":[247,245,243,128],\"score\":0.0405705},\r\n{\"type\":32, \"data\":[189,520,8],\"color\":[113,109,58,128],\"score\":0.0405603},\r\n{\"type\":32, \"data\":[365,375,9],\"color\":[9,11,47,128],\"score\":0.0405527},\r\n{\"type\":32, \"data\":[142,141,3],\"color\":[37,49,6,128],\"score\":0.0405398},\r\n{\"type\":32, \"data\":[136,131,1],\"color\":[245,250,222,128],\"score\":0.040528},\r\n{\"type\":32, \"data\":[33,242,6],\"color\":[1,0,59,128],\"score\":0.0405191},\r\n{\"type\":32, \"data\":[135,298,9],\"color\":[41,64,13,128],\"score\":0.040506},\r\n{\"type\":32, \"data\":[470,323,4],\"color\":[97,94,5,128],\"score\":0.0404962},\r\n{\"type\":32, \"data\":[530,68,25],\"color\":[13,11,51,128],\"score\":0.040483},\r\n{\"type\":32, \"data\":[267,427,14],\"color\":[107,89,50,128],\"score\":0.040475},\r\n{\"type\":32, \"data\":[260,64,2],\"color\":[177,167,123,128],\"score\":0.0404655},\r\n{\"type\":32, \"data\":[415,52,2],\"color\":[255,255,246,128],\"score\":0.0404543},\r\n{\"type\":32, \"data\":[305,275,7],\"color\":[115,96,67,128],\"score\":0.040445},\r\n{\"type\":32, \"data\":[310,78,4],\"color\":[0,0,47,128],\"score\":0.0404354},\r\n{\"type\":32, \"data\":[370,59,3],\"color\":[0,0,34,128],\"score\":0.0404232},\r\n{\"type\":32, \"data\":[60,333,21],\"color\":[9,7,50,128],\"score\":0.0404159},\r\n{\"type\":32, \"data\":[384,248,16],\"color\":[75,89,38,128],\"score\":0.0404079},\r\n{\"type\":32, \"data\":[225,492,23],\"color\":[132,92,65,128],\"score\":0.0403988},\r\n{\"type\":32, \"data\":[365,361,7],\"color\":[51,79,6,128],\"score\":0.0403899},\r\n{\"type\":32, \"data\":[395,393,18],\"color\":[10,8,50,128],\"score\":0.0403806},\r\n{\"type\":32, \"data\":[251,234,8],\"color\":[32,56,3,128],\"score\":0.0403704},\r\n{\"type\":32, \"data\":[280,480,9],\"color\":[181,110,78,128],\"score\":0.0403636},\r\n{\"type\":32, \"data\":[318,315,3],\"color\":[162,139,89,128],\"score\":0.0403521},\r\n{\"type\":32, \"data\":[281,189,5],\"color\":[93,88,75,128],\"score\":0.0403424},\r\n{\"type\":32, \"data\":[506,109,5],\"color\":[10,78,96,128],\"score\":0.0403316},\r\n{\"type\":32, \"data\":[292,488,3],\"color\":[255,237,173,128],\"score\":0.0403243},\r\n{\"type\":32, \"data\":[404,51,2],\"color\":[164,168,160,128],\"score\":0.0403141},\r\n{\"type\":32, \"data\":[284,266,8],\"color\":[168,141,113,128],\"score\":0.0403057},\r\n{\"type\":32, \"data\":[385,48,3],\"color\":[0,0,30,128],\"score\":0.0402965},\r\n{\"type\":32, \"data\":[392,86,4],\"color\":[9,35,61,128],\"score\":0.0402852},\r\n{\"type\":32, \"data\":[148,142,2],\"color\":[11,24,0,128],\"score\":0.0402711},\r\n{\"type\":32, \"data\":[584,395,14],\"color\":[10,9,51,128],\"score\":0.0402621},\r\n{\"type\":32, \"data\":[270,264,3],\"color\":[44,46,23,128],\"score\":0.0402539},\r\n{\"type\":32, \"data\":[606,389,10],\"color\":[170,140,94,128],\"score\":0.0402457},\r\n{\"type\":32, \"data\":[228,183,4],\"color\":[106,112,91,128],\"score\":0.0402344},\r\n{\"type\":32, \"data\":[350,84,6],\"color\":[0,0,44,128],\"score\":0.0402241},\r\n{\"type\":32, \"data\":[339,564,4],\"color\":[54,74,11,128],\"score\":0.0402148},\r\n{\"type\":32, \"data\":[566,48,14],\"color\":[10,9,49,128],\"score\":0.040202},\r\n{\"type\":32, \"data\":[299,314,2],\"color\":[255,243,187,128],\"score\":0.0401887},\r\n{\"type\":32, \"data\":[95,102,10],\"color\":[85,83,41,128],\"score\":0.0401785},\r\n{\"type\":32, \"data\":[260,52,10],\"color\":[8,7,50,128],\"score\":0.0401695},\r\n{\"type\":32, \"data\":[284,448,8],\"color\":[165,128,71,128],\"score\":0.0401617},\r\n{\"type\":32, \"data\":[170,148,3],\"color\":[233,232,229,128],\"score\":0.0401447},\r\n{\"type\":32, \"data\":[381,82,4],\"color\":[88,78,41,128],\"score\":0.0401343},\r\n{\"type\":32, \"data\":[477,90,9],\"color\":[100,92,64,128],\"score\":0.0401245},\r\n{\"type\":32, \"data\":[406,85,4],\"color\":[0,0,43,128],\"score\":0.0401095},\r\n{\"type\":32, \"data\":[373,55,1],\"color\":[242,252,227,128],\"score\":0.0400995},\r\n{\"type\":32, \"data\":[440,226,5],\"color\":[3,3,57,128],\"score\":0.0400903},\r\n{\"type\":32, \"data\":[59,160,7],\"color\":[0,0,52,128],\"score\":0.0400794},\r\n{\"type\":32, \"data\":[463,65,2],\"color\":[0,0,15,128],\"score\":0.0400595},\r\n{\"type\":32, \"data\":[101,141,1],\"color\":[224,223,225,128],\"score\":0.0400491},\r\n{\"type\":32, \"data\":[513,360,5],\"color\":[78,92,39,128],\"score\":0.0400382},\r\n{\"type\":32, \"data\":[545,34,3],\"color\":[255,255,253,128],\"score\":0.0400285},\r\n{\"type\":32, \"data\":[237,115,12],\"color\":[46,48,17,128],\"score\":0.0400198},\r\n{\"type\":32, \"data\":[560,237,10],\"color\":[6,4,53,128],\"score\":0.0400101},\r\n{\"type\":32, \"data\":[407,63,1],\"color\":[255,255,255,128],\"score\":0.0399971},\r\n{\"type\":32, \"data\":[241,84,3],\"color\":[123,115,70,128],\"score\":0.0399862},\r\n{\"type\":32, \"data\":[439,91,5],\"color\":[159,149,84,128],\"score\":0.039976},\r\n{\"type\":32, \"data\":[614,475,15],\"color\":[101,87,60,128],\"score\":0.0399663},\r\n{\"type\":32, \"data\":[195,166,6],\"color\":[13,28,25,128],\"score\":0.0399596},\r\n{\"type\":32, \"data\":[433,99,4],\"color\":[0,0,50,128],\"score\":0.0399502},\r\n{\"type\":32, \"data\":[560,34,1],\"color\":[255,255,255,128],\"score\":0.0399389},\r\n{\"type\":32, \"data\":[550,122,2],\"color\":[0,0,30,128],\"score\":0.0399303},\r\n{\"type\":32, \"data\":[408,73,2],\"color\":[0,0,21,128],\"score\":0.0399213},\r\n{\"type\":32, \"data\":[327,106,5],\"color\":[19,28,48,128],\"score\":0.039913},\r\n{\"type\":32, \"data\":[790,369,29],\"color\":[11,9,50,128],\"score\":0.0399021},\r\n{\"type\":32, \"data\":[149,336,5],\"color\":[53,63,30,128],\"score\":0.0398945},\r\n{\"type\":32, \"data\":[752,342,13],\"color\":[106,93,48,128],\"score\":0.0398846},\r\n{\"type\":32, \"data\":[315,156,22],\"color\":[44,55,18,128],\"score\":0.0398774},\r\n{\"type\":32, \"data\":[75,249,22],\"color\":[11,9,50,128],\"score\":0.0398702},\r\n{\"type\":32, \"data\":[493,338,3],\"color\":[25,151,153,128],\"score\":0.0398595},\r\n{\"type\":32, \"data\":[359,320,4],\"color\":[124,108,65,128],\"score\":0.0398505},\r\n{\"type\":32, \"data\":[357,425,29],\"color\":[11,10,50,128],\"score\":0.0398422},\r\n{\"type\":32, \"data\":[566,297,16],\"color\":[53,69,16,128],\"score\":0.0398339},\r\n{\"type\":32, \"data\":[31,120,5],\"color\":[102,110,44,128],\"score\":0.0398236},\r\n{\"type\":32, \"data\":[348,69,2],\"color\":[169,179,168,128],\"score\":0.0398063},\r\n{\"type\":32, \"data\":[456,64,2],\"color\":[0,0,34,128],\"score\":0.0397924},\r\n{\"type\":32, \"data\":[341,286,2],\"color\":[31,46,3,128],\"score\":0.0397822},\r\n{\"type\":32, \"data\":[470,233,10],\"color\":[39,45,51,128],\"score\":0.0397747},\r\n{\"type\":32, \"data\":[161,119,21],\"color\":[59,65,22,128],\"score\":0.0397644},\r\n{\"type\":32, \"data\":[433,65,2],\"color\":[0,0,30,128],\"score\":0.0397528},\r\n{\"type\":32, \"data\":[255,544,30],\"color\":[11,10,50,128],\"score\":0.0397441},\r\n{\"type\":32, \"data\":[563,518,21],\"color\":[13,12,48,128],\"score\":0.0397358},\r\n{\"type\":32, \"data\":[297,104,5],\"color\":[18,32,49,128],\"score\":0.0397271},\r\n{\"type\":32, \"data\":[459,94,5],\"color\":[78,69,49,128],\"score\":0.0397169},\r\n{\"type\":32, \"data\":[567,33,1],\"color\":[235,237,252,128],\"score\":0.0397037},\r\n{\"type\":32, \"data\":[402,63,1],\"color\":[255,255,255,128],\"score\":0.0396947},\r\n{\"type\":32, \"data\":[415,49,1],\"color\":[35,39,0,128],\"score\":0.0396848},\r\n{\"type\":32, \"data\":[490,115,5],\"color\":[0,42,54,128],\"score\":0.0396752},\r\n{\"type\":32, \"data\":[438,66,3],\"color\":[0,0,55,128],\"score\":0.039662},\r\n{\"type\":32, \"data\":[544,42,1],\"color\":[236,239,251,128],\"score\":0.0396539},\r\n{\"type\":32, \"data\":[238,207,12],\"color\":[6,15,31,128],\"score\":0.039642},\r\n{\"type\":32, \"data\":[431,70,2],\"color\":[255,255,250,128],\"score\":0.0396291},\r\n{\"type\":32, \"data\":[304,51,5],\"color\":[27,26,62,128],\"score\":0.0396201},\r\n{\"type\":32, \"data\":[587,517,3],\"color\":[132,157,167,128],\"score\":0.0396098},\r\n{\"type\":32, \"data\":[704,287,3],\"color\":[175,139,64,128],\"score\":0.0396006},\r\n{\"type\":32, \"data\":[344,49,1],\"color\":[255,255,255,128],\"score\":0.0395871},\r\n{\"type\":32, \"data\":[360,311,4],\"color\":[77,78,48,128],\"score\":0.0395778},\r\n{\"type\":32, \"data\":[443,57,2],\"color\":[16,10,20,128],\"score\":0.0395655},\r\n{\"type\":32, \"data\":[504,342,1],\"color\":[148,220,195,128],\"score\":0.0395548},\r\n{\"type\":32, \"data\":[474,66,2],\"color\":[0,0,36,128],\"score\":0.0395443},\r\n{\"type\":32, \"data\":[375,68,3],\"color\":[241,242,234,128],\"score\":0.0395353},\r\n{\"type\":32, \"data\":[585,377,2],\"color\":[229,213,172,128],\"score\":0.0395261},\r\n{\"type\":32, \"data\":[448,327,16],\"color\":[10,6,50,128],\"score\":0.0395193},\r\n{\"type\":32, \"data\":[599,569,4],\"color\":[44,46,39,128],\"score\":0.0395089},\r\n{\"type\":32, \"data\":[215,168,3],\"color\":[160,166,155,128],\"score\":0.0394982},\r\n{\"type\":32, \"data\":[424,356,7],\"color\":[51,89,9,128],\"score\":0.03949},\r\n{\"type\":32, \"data\":[105,133,2],\"color\":[192,190,190,128],\"score\":0.0394812},\r\n{\"type\":32, \"data\":[755,365,4],\"color\":[43,73,0,128],\"score\":0.0394742},\r\n{\"type\":32, \"data\":[634,499,7],\"color\":[73,88,42,128],\"score\":0.0394656},\r\n{\"type\":32, \"data\":[473,42,1],\"color\":[44,41,74,128],\"score\":0.0394569},\r\n{\"type\":32, \"data\":[569,365,3],\"color\":[191,173,135,128],\"score\":0.039448},\r\n{\"type\":32, \"data\":[347,49,1],\"color\":[255,255,255,128],\"score\":0.0394387},\r\n{\"type\":32, \"data\":[168,316,27],\"color\":[13,14,48,128],\"score\":0.0394308},\r\n{\"type\":32, \"data\":[525,164,13],\"color\":[73,74,29,128],\"score\":0.0394217},\r\n{\"type\":32, \"data\":[311,70,4],\"color\":[123,109,69,128],\"score\":0.0394125},\r\n{\"type\":32, \"data\":[398,338,17],\"color\":[11,9,49,128],\"score\":0.0394051},\r\n{\"type\":32, \"data\":[334,74,4],\"color\":[0,0,45,128],\"score\":0.0393948},\r\n{\"type\":32, \"data\":[57,146,9],\"color\":[77,90,25,128],\"score\":0.0393857},\r\n{\"type\":32, \"data\":[476,79,1],\"color\":[255,255,255,128],\"score\":0.0393764},\r\n{\"type\":32, \"data\":[547,40,4],\"color\":[75,74,100,128],\"score\":0.0393648},\r\n{\"type\":32, \"data\":[47,276,12],\"color\":[47,75,15,128],\"score\":0.0393572},\r\n{\"type\":32, \"data\":[430,210,4],\"color\":[0,0,64,128],\"score\":0.0393497},\r\n{\"type\":32, \"data\":[241,156,4],\"color\":[96,94,58,128],\"score\":0.0393424},\r\n{\"type\":32, \"data\":[263,449,7],\"color\":[171,130,87,128],\"score\":0.0393347},\r\n{\"type\":32, \"data\":[299,300,4],\"color\":[0,0,44,128],\"score\":0.039325},\r\n{\"type\":32, \"data\":[575,184,14],\"color\":[43,57,9,128],\"score\":0.039315},\r\n{\"type\":32, \"data\":[436,37,2],\"color\":[255,255,255,128],\"score\":0.0393052},\r\n{\"type\":32, \"data\":[439,70,2],\"color\":[255,255,253,128],\"score\":0.039294},\r\n{\"type\":32, \"data\":[475,186,6],\"color\":[1,0,60,128],\"score\":0.0392841},\r\n{\"type\":32, \"data\":[383,105,9],\"color\":[87,95,59,128],\"score\":0.0392733},\r\n{\"type\":32, \"data\":[294,339,22],\"color\":[14,17,46,128],\"score\":0.0392664},\r\n{\"type\":32, \"data\":[577,363,7],\"color\":[87,75,38,128],\"score\":0.0392564},\r\n{\"type\":32, \"data\":[488,365,3],\"color\":[70,100,22,128],\"score\":0.0392471},\r\n{\"type\":32, \"data\":[608,440,5],\"color\":[101,81,60,128],\"score\":0.0392377},\r\n{\"type\":32, \"data\":[472,81,2],\"color\":[0,15,43,128],\"score\":0.0392279},\r\n{\"type\":32, \"data\":[399,62,2],\"color\":[255,255,255,128],\"score\":0.0392182},\r\n{\"type\":32, \"data\":[589,231,3],\"color\":[157,156,106,128],\"score\":0.0392051},\r\n{\"type\":32, \"data\":[377,336,6],\"color\":[72,95,27,128],\"score\":0.039195},\r\n{\"type\":32, \"data\":[219,162,5],\"color\":[79,91,46,128],\"score\":0.0391863},\r\n{\"type\":32, \"data\":[345,67,3],\"color\":[0,0,40,128],\"score\":0.0391768},\r\n{\"type\":32, \"data\":[470,233,5],\"color\":[95,115,28,128],\"score\":0.0391645},\r\n{\"type\":32, \"data\":[417,36,1],\"color\":[236,237,228,128],\"score\":0.0391552},\r\n{\"type\":32, \"data\":[399,43,3],\"color\":[240,240,233,128],\"score\":0.0391469},\r\n{\"type\":32, \"data\":[358,63,2],\"color\":[0,0,28,128],\"score\":0.0391332},\r\n{\"type\":32, \"data\":[192,467,5],\"color\":[93,78,47,128],\"score\":0.0391264},\r\n{\"type\":32, \"data\":[579,545,2],\"color\":[255,255,255,128],\"score\":0.0391187},\r\n{\"type\":32, \"data\":[108,296,6],\"color\":[53,86,9,128],\"score\":0.0391108},\r\n{\"type\":32, \"data\":[349,29,20],\"color\":[11,10,50,128],\"score\":0.0391034},\r\n{\"type\":32, \"data\":[135,143,3],\"color\":[142,156,133,128],\"score\":0.0390937},\r\n{\"type\":32, \"data\":[495,48,2],\"color\":[71,75,56,128],\"score\":0.0390848},\r\n{\"type\":32, \"data\":[496,86,3],\"color\":[201,212,222,128],\"score\":0.0390747},\r\n{\"type\":32, \"data\":[394,93,6],\"color\":[128,114,66,128],\"score\":0.0390656},\r\n{\"type\":32, \"data\":[562,20,13],\"color\":[12,11,50,128],\"score\":0.0390583},\r\n{\"type\":32, \"data\":[419,415,28],\"color\":[11,10,50,128],\"score\":0.0390496},\r\n{\"type\":32, \"data\":[325,324,3],\"color\":[139,140,66,128],\"score\":0.0390371},\r\n{\"type\":32, \"data\":[482,50,2],\"color\":[120,122,106,128],\"score\":0.0390289},\r\n{\"type\":32, \"data\":[368,494,5],\"color\":[64,84,15,128],\"score\":0.0390206},\r\n{\"type\":32, \"data\":[543,40,2],\"color\":[7,8,37,128],\"score\":0.0390121},\r\n{\"type\":32, \"data\":[108,150,1],\"color\":[202,217,204,128],\"score\":0.0390041},\r\n{\"type\":32, \"data\":[311,249,7],\"color\":[98,95,54,128],\"score\":0.0389968},\r\n{\"type\":32, \"data\":[478,61,2],\"color\":[200,217,230,128],\"score\":0.0389885},\r\n{\"type\":32, \"data\":[129,103,8],\"color\":[92,82,46,128],\"score\":0.038979},\r\n{\"type\":32, \"data\":[303,435,5],\"color\":[0,75,89,128],\"score\":0.038966},\r\n{\"type\":32, \"data\":[293,41,14],\"color\":[10,9,49,128],\"score\":0.0389573},\r\n{\"type\":32, \"data\":[208,164,3],\"color\":[150,156,147,128],\"score\":0.0389489},\r\n{\"type\":32, \"data\":[163,144,3],\"color\":[219,215,219,128],\"score\":0.0389369},\r\n{\"type\":32, \"data\":[256,218,7],\"color\":[35,57,6,128],\"score\":0.0389289},\r\n{\"type\":32, \"data\":[328,244,5],\"color\":[188,166,115,128],\"score\":0.0389182},\r\n{\"type\":32, \"data\":[423,214,4],\"color\":[0,0,71,128],\"score\":0.0389078},\r\n{\"type\":32, \"data\":[320,53,1],\"color\":[255,255,255,128],\"score\":0.0388968},\r\n{\"type\":32, \"data\":[269,106,7],\"color\":[104,93,60,128],\"score\":0.0388862},\r\n{\"type\":32, \"data\":[586,569,4],\"color\":[134,152,163,128],\"score\":0.0388788},\r\n{\"type\":32, \"data\":[606,297,27],\"color\":[37,59,11,128],\"score\":0.0388721},\r\n{\"type\":32, \"data\":[295,296,1],\"color\":[0,0,0,128],\"score\":0.038863},\r\n{\"type\":32, \"data\":[259,411,6],\"color\":[45,102,64,128],\"score\":0.0388549},\r\n{\"type\":32, \"data\":[244,103,6],\"color\":[92,87,43,128],\"score\":0.0388468},\r\n{\"type\":32, \"data\":[440,102,5],\"color\":[0,0,50,128],\"score\":0.0388389},\r\n{\"type\":32, \"data\":[462,204,16],\"color\":[41,62,7,128],\"score\":0.03883},\r\n{\"type\":32, \"data\":[502,77,8],\"color\":[9,7,49,128],\"score\":0.0388224},\r\n{\"type\":32, \"data\":[202,458,7],\"color\":[163,123,83,128],\"score\":0.0388146},\r\n{\"type\":32, \"data\":[344,312,9],\"color\":[150,125,89,128],\"score\":0.0388079},\r\n{\"type\":32, \"data\":[337,252,8],\"color\":[63,67,26,128],\"score\":0.0387987},\r\n{\"type\":32, \"data\":[676,293,27],\"color\":[45,65,12,128],\"score\":0.0387917},\r\n{\"type\":32, \"data\":[39,231,4],\"color\":[81,117,32,128],\"score\":0.0387799},\r\n{\"type\":32, \"data\":[470,70,3],\"color\":[231,238,245,128],\"score\":0.0387724},\r\n{\"type\":32, \"data\":[313,282,4],\"color\":[71,66,31,128],\"score\":0.0387614},\r\n{\"type\":32, \"data\":[605,575,2],\"color\":[170,180,182,128],\"score\":0.0387524},\r\n{\"type\":32, \"data\":[399,58,3],\"color\":[44,39,49,128],\"score\":0.0387443},\r\n{\"type\":32, \"data\":[398,52,4],\"color\":[4,4,51,128],\"score\":0.0387337},\r\n{\"type\":32, \"data\":[333,227,3],\"color\":[63,65,27,128],\"score\":0.0387261},\r\n{\"type\":32, \"data\":[557,33,2],\"color\":[255,255,252,128],\"score\":0.038716},\r\n{\"type\":32, \"data\":[30,254,5],\"color\":[62,89,5,128],\"score\":0.0387082},\r\n{\"type\":32, \"data\":[288,530,6],\"color\":[19,43,41,128],\"score\":0.0387014},\r\n{\"type\":32, \"data\":[374,46,2],\"color\":[143,144,167,128],\"score\":0.0386933},\r\n{\"type\":32, \"data\":[436,75,2],\"color\":[0,0,38,128],\"score\":0.0386845},\r\n{\"type\":32, \"data\":[436,180,12],\"color\":[50,56,12,128],\"score\":0.0386778},\r\n{\"type\":32, \"data\":[401,66,2],\"color\":[0,0,34,128],\"score\":0.0386659},\r\n{\"type\":32, \"data\":[156,248,3],\"color\":[62,100,15,128],\"score\":0.0386581},\r\n{\"type\":32, \"data\":[455,37,3],\"color\":[253,252,252,128],\"score\":0.038649},\r\n{\"type\":32, \"data\":[208,145,13],\"color\":[44,57,16,128],\"score\":0.0386418},\r\n{\"type\":32, \"data\":[456,75,3],\"color\":[0,0,47,128],\"score\":0.0386332},\r\n{\"type\":32, \"data\":[309,306,2],\"color\":[253,210,166,128],\"score\":0.038623},\r\n{\"type\":32, \"data\":[523,36,7],\"color\":[217,217,217,128],\"score\":0.0386157},\r\n{\"type\":32, \"data\":[427,65,2],\"color\":[0,0,27,128],\"score\":0.0386069},\r\n{\"type\":32, \"data\":[515,53,2],\"color\":[184,180,151,128],\"score\":0.0385925},\r\n{\"type\":32, \"data\":[340,66,1],\"color\":[220,206,169,128],\"score\":0.0385839},\r\n{\"type\":32, \"data\":[405,114,11],\"color\":[94,84,54,128],\"score\":0.0385781},\r\n{\"type\":32, \"data\":[239,179,11],\"color\":[32,44,9,128],\"score\":0.0385707},\r\n{\"type\":32, \"data\":[595,527,8],\"color\":[105,88,55,128],\"score\":0.0385634},\r\n{\"type\":32, \"data\":[461,303,5],\"color\":[76,98,11,128],\"score\":0.0385554},\r\n{\"type\":32, \"data\":[324,252,6],\"color\":[142,123,89,128],\"score\":0.0385486},\r\n{\"type\":32, \"data\":[340,479,5],\"color\":[66,62,36,128],\"score\":0.0385417},\r\n{\"type\":32, \"data\":[357,521,5],\"color\":[33,44,3,128],\"score\":0.0385323},\r\n{\"type\":32, \"data\":[360,104,6],\"color\":[18,50,62,128],\"score\":0.0385246},\r\n{\"type\":32, \"data\":[545,365,3],\"color\":[69,88,34,128],\"score\":0.0385171},\r\n{\"type\":32, \"data\":[471,61,3],\"color\":[215,225,230,128],\"score\":0.0385098},\r\n{\"type\":32, \"data\":[234,189,4],\"color\":[109,120,89,128],\"score\":0.0384988},\r\n{\"type\":32, \"data\":[286,246,12],\"color\":[132,115,77,128],\"score\":0.0384918},\r\n{\"type\":32, \"data\":[397,74,1],\"color\":[0,0,0,128],\"score\":0.0384792},\r\n{\"type\":32, \"data\":[542,216,10],\"color\":[44,73,8,128],\"score\":0.0384699},\r\n{\"type\":32, \"data\":[328,452,7],\"color\":[91,80,45,128],\"score\":0.0384619},\r\n{\"type\":32, \"data\":[110,132,2],\"color\":[178,171,167,128],\"score\":0.0384518},\r\n{\"type\":32, \"data\":[197,437,14],\"color\":[9,10,49,128],\"score\":0.0384441},\r\n{\"type\":32, \"data\":[363,201,13],\"color\":[65,89,27,128],\"score\":0.0384368},\r\n{\"type\":32, \"data\":[393,304,5],\"color\":[81,102,15,128],\"score\":0.0384284},\r\n{\"type\":32, \"data\":[372,48,2],\"color\":[0,0,2,128],\"score\":0.0384188},\r\n{\"type\":32, \"data\":[275,253,5],\"color\":[180,156,116,128],\"score\":0.0384133},\r\n{\"type\":32, \"data\":[278,78,4],\"color\":[147,134,79,128],\"score\":0.038403},\r\n{\"type\":32, \"data\":[213,552,29],\"color\":[11,10,50,128],\"score\":0.0383966},\r\n{\"type\":32, \"data\":[178,76,24],\"color\":[11,10,50,128],\"score\":0.0383894},\r\n{\"type\":32, \"data\":[218,177,4],\"color\":[94,113,68,128],\"score\":0.0383808},\r\n{\"type\":32, \"data\":[614,229,10],\"color\":[11,10,51,128],\"score\":0.0383737},\r\n{\"type\":32, \"data\":[643,318,32],\"color\":[34,56,11,128],\"score\":0.0383672},\r\n{\"type\":32, \"data\":[563,223,5],\"color\":[51,72,14,128],\"score\":0.0383586},\r\n{\"type\":32, \"data\":[456,131,3],\"color\":[0,0,45,128],\"score\":0.0383514},\r\n{\"type\":32, \"data\":[62,292,4],\"color\":[6,82,104,128],\"score\":0.0383441},\r\n{\"type\":32, \"data\":[685,403,15],\"color\":[87,95,42,128],\"score\":0.0383375},\r\n{\"type\":32, \"data\":[450,404,6],\"color\":[74,102,24,128],\"score\":0.0383298},\r\n{\"type\":32, \"data\":[516,347,1],\"color\":[90,255,240,128],\"score\":0.0383201},\r\n{\"type\":32, \"data\":[323,274,3],\"color\":[89,83,55,128],\"score\":0.0383091},\r\n{\"type\":32, \"data\":[563,208,14],\"color\":[12,13,46,128],\"score\":0.0383024},\r\n{\"type\":32, \"data\":[618,385,4],\"color\":[125,98,63,128],\"score\":0.0382934},\r\n{\"type\":32, \"data\":[454,60,2],\"color\":[219,211,181,128],\"score\":0.0382851},\r\n{\"type\":32, \"data\":[319,59,3],\"color\":[0,0,39,128],\"score\":0.0382764},\r\n{\"type\":32, \"data\":[615,428,6],\"color\":[166,139,111,128],\"score\":0.0382685},\r\n{\"type\":32, \"data\":[354,97,5],\"color\":[103,104,42,128],\"score\":0.0382589},\r\n{\"type\":32, \"data\":[145,146,2],\"color\":[200,217,191,128],\"score\":0.03825},\r\n{\"type\":32, \"data\":[579,136,24],\"color\":[11,10,50,128],\"score\":0.0382429},\r\n{\"type\":32, \"data\":[143,137,2],\"color\":[178,168,171,128],\"score\":0.0382368},\r\n{\"type\":32, \"data\":[300,406,11],\"color\":[8,0,50,128],\"score\":0.0382306},\r\n{\"type\":32, \"data\":[375,105,3],\"color\":[0,17,52,128],\"score\":0.0382227},\r\n{\"type\":32, \"data\":[433,84,7],\"color\":[213,201,157,128],\"score\":0.038211},\r\n{\"type\":32, \"data\":[291,282,4],\"color\":[223,201,160,128],\"score\":0.0382029},\r\n{\"type\":32, \"data\":[310,105,4],\"color\":[17,20,54,128],\"score\":0.0381969},\r\n{\"type\":32, \"data\":[531,35,6],\"color\":[212,211,210,128],\"score\":0.0381868},\r\n{\"type\":32, \"data\":[479,83,2],\"color\":[0,13,52,128],\"score\":0.0381788},\r\n{\"type\":32, \"data\":[480,40,3],\"color\":[141,140,153,128],\"score\":0.0381693},\r\n{\"type\":32, \"data\":[347,294,5],\"color\":[215,176,129,128],\"score\":0.0381622},\r\n{\"type\":32, \"data\":[350,49,1],\"color\":[255,255,255,128],\"score\":0.0381525},\r\n{\"type\":32, \"data\":[276,201,10],\"color\":[36,46,15,128],\"score\":0.0381454},\r\n{\"type\":32, \"data\":[312,400,3],\"color\":[17,126,142,128],\"score\":0.0381352},\r\n{\"type\":32, \"data\":[484,323,5],\"color\":[28,75,74,128],\"score\":0.0381274},\r\n{\"type\":32, \"data\":[363,65,3],\"color\":[207,212,215,128],\"score\":0.0381194},\r\n{\"type\":32, \"data\":[559,107,6],\"color\":[15,16,47,128],\"score\":0.0381121},\r\n{\"type\":32, \"data\":[530,362,3],\"color\":[80,101,34,128],\"score\":0.0381054},\r\n{\"type\":32, \"data\":[589,561,6],\"color\":[84,76,46,128],\"score\":0.0380967},\r\n{\"type\":32, \"data\":[541,34,2],\"color\":[255,255,255,128],\"score\":0.0380884},\r\n{\"type\":32, \"data\":[436,69,2],\"color\":[255,255,255,128],\"score\":0.0380755},\r\n{\"type\":32, \"data\":[206,197,21],\"color\":[11,11,48,128],\"score\":0.0380684},\r\n{\"type\":32, \"data\":[82,270,4],\"color\":[49,88,4,128],\"score\":0.0380605},\r\n{\"type\":32, \"data\":[594,231,3],\"color\":[0,1,62,128],\"score\":0.0380492},\r\n{\"type\":32, \"data\":[352,260,7],\"color\":[138,131,79,128],\"score\":0.0380423},\r\n{\"type\":32, \"data\":[170,464,3],\"color\":[141,116,67,128],\"score\":0.0380334},\r\n{\"type\":32, \"data\":[487,181,9],\"color\":[60,65,21,128],\"score\":0.038026},\r\n{\"type\":32, \"data\":[149,139,2],\"color\":[202,198,192,128],\"score\":0.0380176},\r\n{\"type\":32, \"data\":[311,56,1],\"color\":[255,255,255,128],\"score\":0.0380118},\r\n{\"type\":32, \"data\":[512,34,5],\"color\":[212,212,215,128],\"score\":0.0380045},\r\n{\"type\":32, \"data\":[231,321,7],\"color\":[35,55,7,128],\"score\":0.0379963},\r\n{\"type\":32, \"data\":[43,155,5],\"color\":[0,0,54,128],\"score\":0.0379893},\r\n{\"type\":32, \"data\":[178,512,5],\"color\":[33,56,33,128],\"score\":0.0379832},\r\n{\"type\":32, \"data\":[147,102,6],\"color\":[94,86,48,128],\"score\":0.0379756},\r\n{\"type\":32, \"data\":[398,70,3],\"color\":[255,255,255,128],\"score\":0.0379589},\r\n{\"type\":32, \"data\":[574,258,7],\"color\":[33,58,4,128],\"score\":0.0379497},\r\n{\"type\":32, \"data\":[392,62,1],\"color\":[255,255,255,128],\"score\":0.0379426},\r\n{\"type\":32, \"data\":[324,307,7],\"color\":[59,73,22,128],\"score\":0.0379341},\r\n{\"type\":32, \"data\":[555,38,3],\"color\":[16,15,53,128],\"score\":0.0379281},\r\n{\"type\":32, \"data\":[324,95,8],\"color\":[105,97,46,128],\"score\":0.0379222},\r\n{\"type\":32, \"data\":[454,65,2],\"color\":[0,0,44,128],\"score\":0.0379148},\r\n{\"type\":32, \"data\":[203,331,3],\"color\":[50,101,30,128],\"score\":0.0379068},\r\n{\"type\":32, \"data\":[433,373,4],\"color\":[0,0,65,128],\"score\":0.0379003},\r\n{\"type\":32, \"data\":[602,405,3],\"color\":[226,187,161,128],\"score\":0.0378943},\r\n{\"type\":32, \"data\":[70,164,3],\"color\":[83,109,27,128],\"score\":0.0378871},\r\n{\"type\":32, \"data\":[617,538,3],\"color\":[134,123,41,128],\"score\":0.0378781},\r\n{\"type\":32, \"data\":[39,105,4],\"color\":[108,110,47,128],\"score\":0.0378704},\r\n{\"type\":32, \"data\":[540,108,3],\"color\":[230,230,225,128],\"score\":0.0378551},\r\n{\"type\":32, \"data\":[465,343,4],\"color\":[49,122,54,128],\"score\":0.0378473},\r\n{\"type\":32, \"data\":[468,75,3],\"color\":[0,0,58,128],\"score\":0.0378367},\r\n{\"type\":32, \"data\":[298,315,2],\"color\":[227,211,161,128],\"score\":0.0378275},\r\n{\"type\":32, \"data\":[126,335,2],\"color\":[108,113,23,128],\"score\":0.0378212},\r\n{\"type\":32, \"data\":[443,86,2],\"color\":[0,8,34,128],\"score\":0.0378142},\r\n{\"type\":32, \"data\":[40,175,2],\"color\":[116,132,69,128],\"score\":0.0378051},\r\n{\"type\":32, \"data\":[479,345,4],\"color\":[72,99,12,128],\"score\":0.0377979},\r\n{\"type\":32, \"data\":[109,145,3],\"color\":[34,46,10,128],\"score\":0.0377909},\r\n{\"type\":32, \"data\":[510,228,18],\"color\":[45,72,13,128],\"score\":0.0377838},\r\n{\"type\":32, \"data\":[56,298,4],\"color\":[77,111,35,128],\"score\":0.0377769},\r\n{\"type\":32, \"data\":[286,424,7],\"color\":[5,36,60,128],\"score\":0.0377713},\r\n{\"type\":32, \"data\":[266,226,7],\"color\":[122,104,67,128],\"score\":0.0377638},\r\n{\"type\":32, \"data\":[295,56,1],\"color\":[240,246,255,128],\"score\":0.0377544},\r\n{\"type\":32, \"data\":[116,265,10],\"color\":[30,55,1,128],\"score\":0.0377472},\r\n{\"type\":32, \"data\":[249,437,13],\"color\":[128,105,62,128],\"score\":0.0377401},\r\n{\"type\":32, \"data\":[474,78,1],\"color\":[255,255,255,128],\"score\":0.0377259},\r\n{\"type\":32, \"data\":[433,17,17],\"color\":[11,10,50,128],\"score\":0.0377182},\r\n{\"type\":32, \"data\":[488,124,3],\"color\":[129,97,50,128],\"score\":0.0377108},\r\n{\"type\":32, \"data\":[267,65,1],\"color\":[246,243,196,128],\"score\":0.0377016},\r\n{\"type\":32, \"data\":[269,92,7],\"color\":[0,0,51,128],\"score\":0.0376903},\r\n{\"type\":32, \"data\":[477,147,8],\"color\":[4,0,53,128],\"score\":0.0376834},\r\n{\"type\":32, \"data\":[409,59,3],\"color\":[0,0,40,128],\"score\":0.037673},\r\n{\"type\":32, \"data\":[433,43,1],\"color\":[0,0,0,128],\"score\":0.0376614},\r\n{\"type\":32, \"data\":[293,311,4],\"color\":[1,1,42,128],\"score\":0.0376532},\r\n{\"type\":32, \"data\":[11,214,21],\"color\":[10,8,50,128],\"score\":0.0376483},\r\n{\"type\":32, \"data\":[329,158,6],\"color\":[81,74,35,128],\"score\":0.037642},\r\n{\"type\":32, \"data\":[280,520,6],\"color\":[82,87,33,128],\"score\":0.0376354},\r\n{\"type\":32, \"data\":[22,242,4],\"color\":[57,88,0,128],\"score\":0.0376266},\r\n{\"type\":32, \"data\":[118,133,8],\"color\":[69,76,28,128],\"score\":0.0376187},\r\n{\"type\":32, \"data\":[338,291,4],\"color\":[212,171,130,128],\"score\":0.0376126},\r\n{\"type\":32, \"data\":[502,105,8],\"color\":[65,77,53,128],\"score\":0.0376056},\r\n{\"type\":32, \"data\":[134,191,19],\"color\":[10,9,50,128],\"score\":0.0375988},\r\n{\"type\":32, \"data\":[454,43,2],\"color\":[0,0,35,128],\"score\":0.037582},\r\n{\"type\":32, \"data\":[516,257,13],\"color\":[10,8,51,128],\"score\":0.0375755},\r\n{\"type\":32, \"data\":[631,385,9],\"color\":[67,76,27,128],\"score\":0.0375693},\r\n{\"type\":32, \"data\":[295,512,6],\"color\":[130,101,72,128],\"score\":0.0375636},\r\n{\"type\":32, \"data\":[283,73,3],\"color\":[0,0,53,128],\"score\":0.0375546},\r\n{\"type\":32, \"data\":[577,540,3],\"color\":[56,83,78,128],\"score\":0.0375474},\r\n{\"type\":32, \"data\":[135,137,5],\"color\":[39,50,1,128],\"score\":0.0375369},\r\n{\"type\":32, \"data\":[213,124,4],\"color\":[112,101,70,128],\"score\":0.0375308},\r\n{\"type\":32, \"data\":[591,234,2],\"color\":[0,60,63,128],\"score\":0.0375234},\r\n{\"type\":32, \"data\":[338,78,1],\"color\":[247,247,254,128],\"score\":0.037515},\r\n{\"type\":32, \"data\":[364,90,5],\"color\":[2,0,42,128],\"score\":0.0375096},\r\n{\"type\":32, \"data\":[612,512,13],\"color\":[115,96,60,128],\"score\":0.037503},\r\n{\"type\":32, \"data\":[108,118,13],\"color\":[49,60,18,128],\"score\":0.0374968},\r\n{\"type\":32, \"data\":[592,470,4],\"color\":[56,78,6,128],\"score\":0.0374891},\r\n{\"type\":32, \"data\":[468,118,7],\"color\":[2,0,48,128],\"score\":0.037483},\r\n{\"type\":32, \"data\":[437,107,4],\"color\":[12,47,64,128],\"score\":0.0374757},\r\n{\"type\":32, \"data\":[435,48,3],\"color\":[146,132,77,128],\"score\":0.0374691},\r\n{\"type\":32, \"data\":[608,557,5],\"color\":[0,15,55,128],\"score\":0.0374623},\r\n{\"type\":32, \"data\":[215,439,5],\"color\":[100,111,52,128],\"score\":0.0374569},\r\n{\"type\":32, \"data\":[547,55,12],\"color\":[10,9,49,128],\"score\":0.0374515},\r\n{\"type\":32, \"data\":[707,292,3],\"color\":[150,117,42,128],\"score\":0.0374451},\r\n{\"type\":32, \"data\":[770,339,7],\"color\":[69,97,20,128],\"score\":0.0374389},\r\n{\"type\":32, \"data\":[388,54,2],\"color\":[177,150,83,128],\"score\":0.0374321},\r\n{\"type\":32, \"data\":[576,394,18],\"color\":[11,10,50,128],\"score\":0.0374228},\r\n{\"type\":32, \"data\":[555,34,1],\"color\":[255,255,255,128],\"score\":0.037417},\r\n{\"type\":32, \"data\":[334,307,5],\"color\":[114,94,69,128],\"score\":0.0374111},\r\n{\"type\":32, \"data\":[559,348,1],\"color\":[212,205,165,128],\"score\":0.0374029},\r\n{\"type\":32, \"data\":[44,114,3],\"color\":[0,0,59,128],\"score\":0.0373942},\r\n{\"type\":32, \"data\":[322,114,6],\"color\":[95,91,55,128],\"score\":0.0373874},\r\n{\"type\":32, \"data\":[629,249,6],\"color\":[124,116,52,128],\"score\":0.0373797},\r\n{\"type\":32, \"data\":[592,381,2],\"color\":[239,204,179,128],\"score\":0.0373704},\r\n{\"type\":32, \"data\":[446,214,3],\"color\":[0,0,67,128],\"score\":0.0373643},\r\n{\"type\":32, \"data\":[382,462,22],\"color\":[11,10,50,128],\"score\":0.0373584},\r\n{\"type\":32, \"data\":[491,108,3],\"color\":[160,144,74,128],\"score\":0.0373474},\r\n{\"type\":32, \"data\":[483,57,1],\"color\":[255,255,255,128],\"score\":0.0373378},\r\n{\"type\":32, \"data\":[429,223,8],\"color\":[54,83,12,128],\"score\":0.0373305},\r\n{\"type\":32, \"data\":[467,224,4],\"color\":[0,2,44,128],\"score\":0.0373243},\r\n{\"type\":32, \"data\":[548,307,2],\"color\":[172,180,177,128],\"score\":0.037314},\r\n{\"type\":32, \"data\":[599,445,2],\"color\":[211,191,172,128],\"score\":0.0373072},\r\n{\"type\":32, \"data\":[585,535,2],\"color\":[75,72,78,128],\"score\":0.0372986},\r\n{\"type\":32, \"data\":[625,357,25],\"color\":[44,64,13,128],\"score\":0.037292},\r\n{\"type\":32, \"data\":[261,250,3],\"color\":[32,37,5,128],\"score\":0.0372869},\r\n{\"type\":32, \"data\":[443,71,2],\"color\":[255,255,244,128],\"score\":0.03728},\r\n{\"type\":32, \"data\":[223,226,23],\"color\":[11,10,52,128],\"score\":0.0372739},\r\n{\"type\":32, \"data\":[290,229,5],\"color\":[59,61,27,128],\"score\":0.037268},\r\n{\"type\":32, \"data\":[457,135,2],\"color\":[155,149,47,128],\"score\":0.0372593},\r\n{\"type\":32, \"data\":[420,41,2],\"color\":[4,2,35,128],\"score\":0.0372444},\r\n{\"type\":32, \"data\":[581,467,9],\"color\":[8,7,51,128],\"score\":0.0372382},\r\n{\"type\":32, \"data\":[266,70,4],\"color\":[0,0,44,128],\"score\":0.0372316},\r\n{\"type\":32, \"data\":[259,261,4],\"color\":[146,129,67,128],\"score\":0.0372234},\r\n{\"type\":32, \"data\":[490,53,3],\"color\":[212,218,229,128],\"score\":0.0372154},\r\n{\"type\":32, \"data\":[127,80,16],\"color\":[10,9,51,128],\"score\":0.0372098},\r\n{\"type\":32, \"data\":[281,342,4],\"color\":[46,70,20,128],\"score\":0.0372029},\r\n{\"type\":32, \"data\":[460,45,4],\"color\":[134,130,134,128],\"score\":0.037196},\r\n{\"type\":32, \"data\":[553,33,3],\"color\":[252,254,249,128],\"score\":0.0371867},\r\n{\"type\":32, \"data\":[596,454,2],\"color\":[201,196,189,128],\"score\":0.0371792},\r\n{\"type\":32, \"data\":[360,39,11],\"color\":[10,10,50,128],\"score\":0.0371715},\r\n{\"type\":32, \"data\":[325,63,2],\"color\":[172,171,150,128],\"score\":0.0371641},\r\n{\"type\":32, \"data\":[122,141,1],\"color\":[230,242,243,128],\"score\":0.0371557},\r\n{\"type\":32, \"data\":[404,63,1],\"color\":[246,255,239,128],\"score\":0.037148},\r\n{\"type\":32, \"data\":[310,315,4],\"color\":[0,0,46,128],\"score\":0.0371377},\r\n{\"type\":32, \"data\":[627,424,8],\"color\":[60,66,24,128],\"score\":0.0371328},\r\n{\"type\":32, \"data\":[35,304,15],\"color\":[10,8,51,128],\"score\":0.037127},\r\n{\"type\":32, \"data\":[509,97,2],\"color\":[255,255,255,128],\"score\":0.0371148},\r\n{\"type\":32, \"data\":[375,51,4],\"color\":[7,7,49,128],\"score\":0.0371083},\r\n{\"type\":32, \"data\":[477,104,4],\"color\":[48,101,98,128],\"score\":0.0371027},\r\n{\"type\":32, \"data\":[308,57,1],\"color\":[255,255,243,128],\"score\":0.0370936},\r\n{\"type\":32, \"data\":[621,453,7],\"color\":[78,73,42,128],\"score\":0.0370874},\r\n{\"type\":32, \"data\":[295,60,3],\"color\":[15,16,54,128],\"score\":0.0370813},\r\n{\"type\":32, \"data\":[423,38,3],\"color\":[200,199,211,128],\"score\":0.0370751},\r\n{\"type\":32, \"data\":[527,375,12],\"color\":[10,8,50,128],\"score\":0.0370691},\r\n{\"type\":32, \"data\":[745,387,11],\"color\":[74,79,29,128],\"score\":0.0370629},\r\n{\"type\":32, \"data\":[254,354,7],\"color\":[6,3,56,128],\"score\":0.0370542},\r\n{\"type\":32, \"data\":[35,262,7],\"color\":[55,82,8,128],\"score\":0.0370476},\r\n{\"type\":32, \"data\":[381,52,2],\"color\":[204,204,188,128],\"score\":0.037037},\r\n{\"type\":32, \"data\":[340,57,1],\"color\":[200,205,216,128],\"score\":0.0370253},\r\n{\"type\":32, \"data\":[320,486,7],\"color\":[173,124,94,128],\"score\":0.0370196},\r\n{\"type\":32, \"data\":[563,263,4],\"color\":[96,130,82,128],\"score\":0.0370115},\r\n{\"type\":32, \"data\":[413,37,2],\"color\":[130,132,159,128],\"score\":0.0370049},\r\n{\"type\":32, \"data\":[392,269,10],\"color\":[77,92,35,128],\"score\":0.0370005},\r\n{\"type\":32, \"data\":[250,70,4],\"color\":[0,0,48,128],\"score\":0.0369932},\r\n{\"type\":32, \"data\":[603,458,4],\"color\":[104,87,55,128],\"score\":0.0369869},\r\n{\"type\":32, \"data\":[280,130,16],\"color\":[56,55,25,128],\"score\":0.0369814},\r\n{\"type\":32, \"data\":[219,69,26],\"color\":[11,10,50,128],\"score\":0.0369745},\r\n{\"type\":32, \"data\":[428,49,2],\"color\":[248,248,253,128],\"score\":0.0369639},\r\n{\"type\":32, \"data\":[709,421,5],\"color\":[20,45,2,128],\"score\":0.0369579},\r\n{\"type\":32, \"data\":[391,320,8],\"color\":[12,13,50,128],\"score\":0.0369516},\r\n{\"type\":32, \"data\":[422,49,1],\"color\":[68,65,44,128],\"score\":0.0369438},\r\n{\"type\":32, \"data\":[419,45,3],\"color\":[252,253,255,128],\"score\":0.0369329},\r\n{\"type\":32, \"data\":[143,465,24],\"color\":[11,10,50,128],\"score\":0.0369257},\r\n{\"type\":32, \"data\":[303,507,5],\"color\":[211,155,110,128],\"score\":0.0369188},\r\n{\"type\":32, \"data\":[390,70,1],\"color\":[255,255,255,128],\"score\":0.0369082},\r\n{\"type\":32, \"data\":[304,57,1],\"color\":[255,255,255,128],\"score\":0.0368959},\r\n{\"type\":32, \"data\":[393,66,2],\"color\":[0,0,40,128],\"score\":0.0368853},\r\n{\"type\":32, \"data\":[561,350,2],\"color\":[162,152,131,128],\"score\":0.0368795},\r\n{\"type\":32, \"data\":[243,194,1],\"color\":[218,221,203,128],\"score\":0.0368721},\r\n{\"type\":32, \"data\":[613,401,3],\"color\":[228,195,151,128],\"score\":0.0368658},\r\n{\"type\":32, \"data\":[567,273,8],\"color\":[82,96,42,128],\"score\":0.0368594},\r\n{\"type\":32, \"data\":[327,230,4],\"color\":[189,168,114,128],\"score\":0.0368533},\r\n{\"type\":32, \"data\":[234,423,4],\"color\":[102,108,52,128],\"score\":0.0368467},\r\n{\"type\":32, \"data\":[379,73,2],\"color\":[0,0,10,128],\"score\":0.0368338},\r\n{\"type\":32, \"data\":[614,434,2],\"color\":[71,57,31,128],\"score\":0.0368279},\r\n{\"type\":32, \"data\":[97,143,2],\"color\":[182,181,172,128],\"score\":0.0368224},\r\n{\"type\":32, \"data\":[393,54,2],\"color\":[178,169,123,128],\"score\":0.0368165},\r\n{\"type\":32, \"data\":[381,47,4],\"color\":[0,0,42,128],\"score\":0.0368105},\r\n{\"type\":32, \"data\":[479,10,20],\"color\":[11,10,50,128],\"score\":0.0368034},\r\n{\"type\":32, \"data\":[496,346,4],\"color\":[8,0,38,128],\"score\":0.0367964},\r\n{\"type\":32, \"data\":[286,293,3],\"color\":[109,95,55,128],\"score\":0.0367878},\r\n{\"type\":32, \"data\":[483,82,1],\"color\":[0,19,44,128],\"score\":0.0367817},\r\n{\"type\":32, \"data\":[302,305,3],\"color\":[0,0,54,128],\"score\":0.0367755},\r\n{\"type\":32, \"data\":[427,44,3],\"color\":[78,74,77,128],\"score\":0.0367699},\r\n{\"type\":32, \"data\":[595,574,2],\"color\":[182,200,204,128],\"score\":0.0367639},\r\n{\"type\":32, \"data\":[436,81,4],\"color\":[207,191,149,128],\"score\":0.0367572},\r\n{\"type\":32, \"data\":[313,273,2],\"color\":[255,200,155,128],\"score\":0.036752},\r\n{\"type\":32, \"data\":[62,103,10],\"color\":[88,84,43,128],\"score\":0.036747},\r\n{\"type\":32, \"data\":[587,196,4],\"color\":[0,0,64,128],\"score\":0.0367409},\r\n{\"type\":32, \"data\":[437,62,1],\"color\":[255,255,249,128],\"score\":0.036735},\r\n{\"type\":32, \"data\":[497,52,2],\"color\":[200,214,218,128],\"score\":0.0367275},\r\n{\"type\":32, \"data\":[688,378,16],\"color\":[89,85,50,128],\"score\":0.0367222},\r\n{\"type\":32, \"data\":[510,203,15],\"color\":[31,50,13,128],\"score\":0.0367166},\r\n{\"type\":32, \"data\":[480,80,2],\"color\":[255,255,255,128],\"score\":0.0367022},\r\n{\"type\":32, \"data\":[401,57,2],\"color\":[148,143,112,128],\"score\":0.0366948},\r\n{\"type\":32, \"data\":[388,44,2],\"color\":[154,150,171,128],\"score\":0.0366848},\r\n{\"type\":32, \"data\":[574,547,2],\"color\":[166,179,191,128],\"score\":0.0366766},\r\n{\"type\":32, \"data\":[125,213,24],\"color\":[10,9,51,128],\"score\":0.0366707},\r\n{\"type\":32, \"data\":[411,69,2],\"color\":[219,224,214,128],\"score\":0.0366602},\r\n{\"type\":32, \"data\":[621,362,8],\"color\":[73,78,27,128],\"score\":0.0366539},\r\n{\"type\":32, \"data\":[192,154,2],\"color\":[236,242,232,128],\"score\":0.0366434},\r\n{\"type\":32, \"data\":[453,53,2],\"color\":[206,200,172,128],\"score\":0.036635},\r\n{\"type\":32, \"data\":[224,327,4],\"color\":[92,107,62,128],\"score\":0.0366282},\r\n{\"type\":32, \"data\":[608,208,5],\"color\":[46,65,7,128],\"score\":0.0366224},\r\n{\"type\":32, \"data\":[474,74,3],\"color\":[0,0,47,128],\"score\":0.0366169},\r\n{\"type\":32, \"data\":[380,68,2],\"color\":[225,226,206,128],\"score\":0.03661},\r\n{\"type\":32, \"data\":[119,147,1],\"color\":[255,255,252,128],\"score\":0.036603},\r\n{\"type\":32, \"data\":[369,45,1],\"color\":[164,166,182,128],\"score\":0.0365959},\r\n{\"type\":32, \"data\":[466,43,1],\"color\":[75,72,103,128],\"score\":0.0365899},\r\n{\"type\":32, \"data\":[299,60,4],\"color\":[11,12,50,128],\"score\":0.0365807},\r\n{\"type\":32, \"data\":[314,423,6],\"color\":[91,88,46,128],\"score\":0.0365766},\r\n{\"type\":32, \"data\":[542,136,1],\"color\":[237,234,194,128],\"score\":0.0365675},\r\n{\"type\":32, \"data\":[397,85,2],\"color\":[211,200,181,128],\"score\":0.0365587},\r\n{\"type\":32, \"data\":[587,219,8],\"color\":[5,0,56,128],\"score\":0.0365532},\r\n{\"type\":32, \"data\":[387,61,1],\"color\":[217,231,234,128],\"score\":0.0365435},\r\n{\"type\":32, \"data\":[276,224,8],\"color\":[76,78,35,128],\"score\":0.0365373},\r\n{\"type\":32, \"data\":[712,333,14],\"color\":[77,86,29,128],\"score\":0.0365309},\r\n{\"type\":32, \"data\":[509,102,4],\"color\":[80,63,36,128],\"score\":0.0365242},\r\n{\"type\":32, \"data\":[308,98,6],\"color\":[100,96,50,128],\"score\":0.0365186},\r\n{\"type\":32, \"data\":[564,114,1],\"color\":[236,243,218,128],\"score\":0.0365131},\r\n{\"type\":32, \"data\":[477,88,3],\"color\":[156,142,110,128],\"score\":0.036507},\r\n{\"type\":32, \"data\":[374,61,1],\"color\":[0,0,24,128],\"score\":0.0365012},\r\n{\"type\":32, \"data\":[567,364,1],\"color\":[253,255,195,128],\"score\":0.0364945},\r\n{\"type\":32, \"data\":[429,92,3],\"color\":[93,100,65,128],\"score\":0.0364872},\r\n{\"type\":32, \"data\":[93,154,1],\"color\":[178,195,158,128],\"score\":0.036479},\r\n{\"type\":32, \"data\":[221,108,15],\"color\":[55,61,21,128],\"score\":0.0364731},\r\n{\"type\":32, \"data\":[386,37,7],\"color\":[10,9,49,128],\"score\":0.0364671},\r\n{\"type\":32, \"data\":[537,42,2],\"color\":[13,11,55,128],\"score\":0.036459},\r\n{\"type\":32, \"data\":[270,347,4],\"color\":[4,0,60,128],\"score\":0.0364542},\r\n{\"type\":32, \"data\":[396,59,1],\"color\":[0,0,12,128],\"score\":0.0364465},\r\n{\"type\":32, \"data\":[296,307,2],\"color\":[205,179,124,128],\"score\":0.0364363},\r\n{\"type\":32, \"data\":[456,30,3],\"color\":[0,0,39,128],\"score\":0.0364301},\r\n{\"type\":32, \"data\":[305,318,3],\"color\":[135,112,75,128],\"score\":0.0364229},\r\n{\"type\":32, \"data\":[466,55,2],\"color\":[255,255,255,128],\"score\":0.036415},\r\n{\"type\":32, \"data\":[584,498,5],\"color\":[37,61,11,128],\"score\":0.0364088},\r\n{\"type\":32, \"data\":[499,87,1],\"color\":[248,255,255,128],\"score\":0.0364022},\r\n{\"type\":32, \"data\":[278,491,8],\"color\":[169,131,91,128],\"score\":0.0363965},\r\n{\"type\":32, \"data\":[626,408,3],\"color\":[29,35,10,128],\"score\":0.0363909},\r\n{\"type\":32, \"data\":[537,39,1],\"color\":[255,255,251,128],\"score\":0.0363822},\r\n{\"type\":32, \"data\":[38,127,3],\"color\":[0,0,59,128],\"score\":0.0363751},\r\n{\"type\":32, \"data\":[558,287,6],\"color\":[98,110,61,128],\"score\":0.0363664},\r\n{\"type\":32, \"data\":[333,263,4],\"color\":[41,49,15,128],\"score\":0.0363605},\r\n{\"type\":32, \"data\":[589,548,3],\"color\":[116,103,56,128],\"score\":0.0363536},\r\n{\"type\":32, \"data\":[252,87,4],\"color\":[127,115,62,128],\"score\":0.0363462},\r\n{\"type\":32, \"data\":[273,270,4],\"color\":[75,76,46,128],\"score\":0.0363393},\r\n{\"type\":32, \"data\":[67,166,2],\"color\":[95,132,12,128],\"score\":0.0363331},\r\n{\"type\":32, \"data\":[175,114,14],\"color\":[72,73,31,128],\"score\":0.0363266},\r\n{\"type\":32, \"data\":[284,85,9],\"color\":[97,87,54,128],\"score\":0.0363196},\r\n{\"type\":32, \"data\":[151,506,22],\"color\":[12,10,50,128],\"score\":0.0363145},\r\n{\"type\":32, \"data\":[660,266,8],\"color\":[48,77,12,128],\"score\":0.0363083},\r\n{\"type\":32, \"data\":[531,107,4],\"color\":[165,152,116,128],\"score\":0.0363006},\r\n{\"type\":32, \"data\":[304,428,6],\"color\":[3,19,55,128],\"score\":0.0362952},\r\n{\"type\":32, \"data\":[445,78,1],\"color\":[223,223,208,128],\"score\":0.0362844},\r\n{\"type\":32, \"data\":[466,133,3],\"color\":[0,0,46,128],\"score\":0.0362783},\r\n{\"type\":32, \"data\":[587,520,4],\"color\":[139,151,145,128],\"score\":0.0362714},\r\n{\"type\":32, \"data\":[296,437,3],\"color\":[86,128,80,128],\"score\":0.0362659},\r\n{\"type\":32, \"data\":[94,137,6],\"color\":[85,82,53,128],\"score\":0.0362604},\r\n{\"type\":32, \"data\":[176,288,3],\"color\":[34,76,0,128],\"score\":0.036254},\r\n{\"type\":32, \"data\":[694,353,10],\"color\":[57,69,23,128],\"score\":0.0362489},\r\n{\"type\":32, \"data\":[593,487,2],\"color\":[209,203,201,128],\"score\":0.0362398},\r\n{\"type\":32, \"data\":[488,81,2],\"color\":[194,207,212,128],\"score\":0.0362327},\r\n{\"type\":32, \"data\":[573,368,3],\"color\":[182,157,124,128],\"score\":0.0362258},\r\n{\"type\":32, \"data\":[379,58,4],\"color\":[0,0,40,128],\"score\":0.0362186},\r\n{\"type\":32, \"data\":[351,529,4],\"color\":[109,102,51,128],\"score\":0.0362115},\r\n{\"type\":32, \"data\":[509,94,2],\"color\":[66,81,86,128],\"score\":0.0362048},\r\n{\"type\":32, \"data\":[237,135,4],\"color\":[107,97,70,128],\"score\":0.0361989},\r\n{\"type\":32, \"data\":[593,461,3],\"color\":[45,56,12,128],\"score\":0.0361931},\r\n{\"type\":32, \"data\":[179,147,3],\"color\":[51,62,12,128],\"score\":0.0361883},\r\n{\"type\":32, \"data\":[557,3,28],\"color\":[11,10,50,128],\"score\":0.036182},\r\n{\"type\":32, \"data\":[611,413,10],\"color\":[171,136,105,128],\"score\":0.0361753},\r\n{\"type\":32, \"data\":[485,49,1],\"color\":[75,87,45,128],\"score\":0.0361686},\r\n{\"type\":32, \"data\":[298,268,9],\"color\":[145,116,87,128],\"score\":0.0361627},\r\n{\"type\":32, \"data\":[598,487,5],\"color\":[112,91,61,128],\"score\":0.0361546},\r\n{\"type\":32, \"data\":[333,324,7],\"color\":[63,78,17,128],\"score\":0.0361481},\r\n{\"type\":32, \"data\":[626,558,18],\"color\":[12,10,50,128],\"score\":0.0361416},\r\n{\"type\":32, \"data\":[699,281,2],\"color\":[121,136,42,128],\"score\":0.0361356},\r\n{\"type\":32, \"data\":[423,64,2],\"color\":[104,115,146,128],\"score\":0.036129},\r\n{\"type\":32, \"data\":[457,79,2],\"color\":[206,203,203,128],\"score\":0.0361219},\r\n{\"type\":32, \"data\":[534,98,4],\"color\":[128,134,123,128],\"score\":0.0361133},\r\n{\"type\":32, \"data\":[422,193,14],\"color\":[27,43,14,128],\"score\":0.0361082},\r\n{\"type\":32, \"data\":[598,165,16],\"color\":[10,8,51,128],\"score\":0.0361028},\r\n{\"type\":32, \"data\":[295,66,3],\"color\":[202,188,143,128],\"score\":0.0360963},\r\n{\"type\":32, \"data\":[282,436,8],\"color\":[101,94,55,128],\"score\":0.0360892},\r\n{\"type\":32, \"data\":[24,181,2],\"color\":[102,121,83,128],\"score\":0.0360813},\r\n{\"type\":32, \"data\":[470,176,8],\"color\":[7,5,55,128],\"score\":0.0360746},\r\n{\"type\":32, \"data\":[624,492,12],\"color\":[75,73,42,128],\"score\":0.0360685}\r\n]}");
};
ludum_WorldBuilder.__name__ = true;
ludum_WorldBuilder.prototype = {
	loadWorld: function(data) {
		var shapeData = JSON.parse(data);
		var _g = 0;
		var _g1 = shapeData.shapes;
		while(_g < _g1.length) {
			var shape = _g1[_g];
			++_g;
			var color = "rgb(" + shape.color[0] + "," + shape.color[1] + "," + shape.color[2] + ")";
			var alpha = shape.color[3] / 255.0;
			this.shapes.push({ r : shape.data[2], x : shape.data[0], y : shape.data[1], rgb : color, a : alpha});
		}
	}
	,__class__: ludum_WorldBuilder
};
var motion_actuators_IGenericActuator = function() { };
motion_actuators_IGenericActuator.__name__ = true;
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
motion_actuators_GenericActuator.__name__ = true;
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = new Date().getTime() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		motion_actuators_SimpleActuator.timer = new haxe_Timer(33);
		motion_actuators_SimpleActuator.timer.run = motion_actuators_SimpleActuator.stage_onEnterFrame;
	}
};
motion_actuators_SimpleActuator.__name__ = true;
motion_actuators_SimpleActuator.stage_onEnterFrame = function() {
	var currentTime = new Date().getTime() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target["visible"] = value1;
				} else {
					Reflect.setProperty(target,"visible",value1);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && Object.prototype.hasOwnProperty.call(this.properties,"visible");
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				value1 = Reflect.getProperty(target1,"visible");
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2["visible"] = true;
			} else {
				Reflect.setProperty(target2,"visible",true);
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = new Date().getTime() / 1000;
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += new Date().getTime() / 1000 - this.pauseTime;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = endValue;
						} else {
							Reflect.setProperty(details.target,details.propertyName,endValue);
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							value2 = Reflect.getProperty(target,"alpha");
						}
						tmp = value2 == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
motion_easing_Expo.__name__ = true;
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut"};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
motion_easing_IEasing.__name__ = true;
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
motion_easing_ExpoEaseOut.__name__ = true;
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
motion_Actuate.__name__ = true;
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
var motion_IComponentPath = function() { };
motion_IComponentPath.__name__ = true;
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
motion_actuators_MethodActuator.__name__ = true;
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
motion_actuators_MotionPathActuator.__name__ = true;
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
motion_actuators_PropertyDetails.__name__ = true;
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
motion_actuators_PropertyPathDetails.__name__ = true;
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
	,__properties__: {get_numListeners:"get_numListeners"}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
	,__properties__: {set_listener:"set_listener"}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
	,__properties__: {get_length:"get_length"}
};
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
};
nape_callbacks_Callback.__name__ = true;
nape_callbacks_Callback.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
};
var nape_callbacks_BodyCallback = function() { };
nape_callbacks_BodyCallback.__name__ = true;
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
};
nape_callbacks_Listener.__name__ = true;
nape_callbacks_Listener.prototype = {
	toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == 0) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == 1) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == 2 ? "InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}" : "PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
};
var nape_callbacks_BodyListener = function() {
	this.zpp_inner_zn = null;
};
nape_callbacks_BodyListener.__name__ = true;
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_BodyListener
});
var nape_callbacks_CbEvent = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbEvent" + " derp!");
	}
};
nape_callbacks_CbEvent.__name__ = true;
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_PRE) {
			return "PRE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
				return "BEGIN";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
					return "ONGOING";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
						return "END";
					} else {
						if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
							return "WAKE";
						} else {
							if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
								return "SLEEP";
							} else {
								if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
									zpp_$nape_util_ZPP_$Flags.internal = true;
									zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
									zpp_$nape_util_ZPP_$Flags.internal = false;
								}
								if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
									return "BREAK";
								} else {
									return "";
								}
							}
						}
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbType.__name__ = true;
nape_callbacks_CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"};
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) {
			return "ANY_BODY";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) {
			return "ANY_SHAPE";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) {
			return "ANY_COMPOUND";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) {
			return "ANY_CONSTRAINT";
		} else {
			return "CbType#" + this.zpp_inner.id;
		}
	}
	,__class__: nape_callbacks_CbType
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CbTypeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbType" + "Iterator derp!");
	}
};
nape_callbacks_CbTypeIterator.__name__ = true;
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbTypeList.__name__ = true;
nape_callbacks_CbTypeList.fromArray = function(array) {
	if(array == null) {
		throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_CbTypeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
				nape_callbacks_CbTypeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_CbTypeList
};
var nape_callbacks_ConstraintCallback = function() { };
nape_callbacks_ConstraintCallback.__name__ = true;
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
});
var nape_callbacks_ConstraintListener = function() {
	this.zpp_inner_zn = null;
};
nape_callbacks_ConstraintListener.__name__ = true;
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_ConstraintListener
});
var nape_callbacks_InteractionCallback = function() { };
nape_callbacks_InteractionCallback.__name__ = true;
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
});
var nape_callbacks_InteractionListener = function() {
	this.zpp_inner_zn = null;
};
nape_callbacks_InteractionListener.__name__ = true;
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_InteractionListener
});
var nape_callbacks_InteractionType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionType" + " derp!");
	}
};
nape_callbacks_InteractionType.__name__ = true;
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					return "FLUID";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_ANY) {
						return "ANY";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ListenerList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Listener" + "Iterator derp!");
	}
};
nape_callbacks_ListenerIterator.__name__ = true;
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
};
nape_callbacks_ListenerList.__name__ = true;
nape_callbacks_ListenerList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_ListenerIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
				nape_callbacks_ListenerIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_ListenerList
};
var nape_callbacks_ListenerType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ListenerType" + " derp!");
	}
};
nape_callbacks_ListenerType.__name__ = true;
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_BODY) {
			return "BODY";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT) {
				return "CONSTRAINT";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION) {
					return "INTERACTION";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_PRE) {
						return "PRE";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function() {
	this.zpp_inner = null;
};
nape_callbacks_OptionType.__name__ = true;
nape_callbacks_OptionType.prototype = {
	toString: function() {
		if(this.zpp_inner.wrap_includes == null) {
			this.zpp_inner.setup_includes();
		}
		var inc = this.zpp_inner.wrap_includes.toString();
		if(this.zpp_inner.wrap_excludes == null) {
			this.zpp_inner.setup_excludes();
		}
		var exc = this.zpp_inner.wrap_excludes.toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape_callbacks_OptionType
};
var nape_callbacks_PreCallback = function() { };
nape_callbacks_PreCallback.__name__ = true;
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
});
var nape_callbacks_PreFlag = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "PreFlag" + " derp!");
	}
};
nape_callbacks_PreFlag.__name__ = true;
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
			return "ACCEPT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
				return "IGNORE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
					return "ACCEPT_ONCE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE) {
						return "IGNORE_ONCE";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function() {
	this.zpp_inner_zn = null;
};
nape_callbacks_PreListener.__name__ = true;
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_PreListener
});
var nape_constraint_Constraint = function() { };
nape_constraint_Constraint.__name__ = true;
nape_constraint_Constraint.prototype = {
	toString: function() {
		return "{Constraint}";
	}
	,__class__: nape_constraint_Constraint
};
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConstraintList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Constraint" + "Iterator derp!");
	}
};
nape_constraint_ConstraintIterator.__name__ = true;
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
};
nape_constraint_ConstraintList.__name__ = true;
nape_constraint_ConstraintList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_constraint_ConstraintIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
				nape_constraint_ConstraintIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_constraint_ConstraintList
};
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate Arbiter derp!");
	}
};
nape_dynamics_Arbiter.__name__ = true;
nape_dynamics_Arbiter.prototype = {
	toString: function() {
		var ret = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "CollisionArbiter" : this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID ? "FluidArbiter" : "SensorArbiter";
		if(this.zpp_inner.cleared) {
			return ret + "(object-pooled)";
		} else {
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp = ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws2.outer : this.zpp_inner.ws1.outer).toString() + "|";
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp1 = tmp + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws1.outer : this.zpp_inner.ws2.outer).toString() + ")";
			var tmp2 = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "[" + ["SD","DD"][this.zpp_inner.colarb.stat ? 0 : 1] + "]" : "";
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp3;
			var _g = this.zpp_inner.immState;
			var x = _g;
			if(x == 5) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			} else if(_g == 1) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			} else {
				var x1 = _g;
				if(x1 == 6) {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
				}
			}
			return tmp1 + tmp2 + "<-" + tmp3.toString();
		}
	}
	,__class__: nape_dynamics_Arbiter
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ArbiterList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Arbiter" + "Iterator derp!");
	}
};
nape_dynamics_ArbiterIterator.__name__ = true;
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
};
nape_dynamics_ArbiterList.__name__ = true;
nape_dynamics_ArbiterList.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
				nape_dynamics_ArbiterIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ArbiterList
};
var nape_dynamics_ArbiterType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ArbiterType" + " derp!");
	}
};
nape_dynamics_ArbiterType.__name__ = true;
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID) {
					return "FLUID";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate CollisionArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_CollisionArbiter.__name__ = true;
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_CollisionArbiter
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Contact.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate Contact derp!");
	}
};
nape_dynamics_Contact.__name__ = true;
nape_dynamics_Contact.prototype = {
	toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
			return "{object-pooled}";
		} else {
			return "{Contact}";
		}
	}
	,__class__: nape_dynamics_Contact
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ContactList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Contact" + "Iterator derp!");
	}
};
nape_dynamics_ContactIterator.__name__ = true;
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
};
nape_dynamics_ContactList.__name__ = true;
nape_dynamics_ContactList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite1 = this.zpp_inner.inner.next;
				while(cx_ite1 != null) {
					var i1 = cx_ite1;
					if(i1.active && i1.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_ContactIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = 0;
				var cx_ite = _this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						_this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
				nape_dynamics_ContactIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i1 = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ContactList
};
var nape_dynamics_FluidArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate FluidArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_FluidArbiter.__name__ = true;
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_FluidArbiter
});
var nape_dynamics_InteractionFilter = function() { };
nape_dynamics_InteractionFilter.__name__ = true;
nape_dynamics_InteractionFilter.prototype = {
	__class__: nape_dynamics_InteractionFilter
};
var nape_dynamics_InteractionGroup = function() {
	this.zpp_inner = null;
};
nape_dynamics_InteractionGroup.__name__ = true;
nape_dynamics_InteractionGroup.prototype = {
	toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) {
			ret += ":ignore";
		}
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractionGroupList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!");
	}
};
nape_dynamics_InteractionGroupIterator.__name__ = true;
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
};
nape_dynamics_InteractionGroupList.__name__ = true;
nape_dynamics_InteractionGroupList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_InteractionGroupIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
				nape_dynamics_InteractionGroupIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_InteractionGroupList
};
var nape_geom_AABB = function() {
	this.zpp_inner = null;
};
nape_geom_AABB.__name__ = true;
nape_geom_AABB.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
};
nape_geom_ConvexResult.__name__ = true;
nape_geom_ConvexResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: " + this.zpp_inner.toiDistance + " }";
	}
	,__class__: nape_geom_ConvexResult
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConvexResultList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!");
	}
};
nape_geom_ConvexResultIterator.__name__ = true;
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
};
nape_geom_ConvexResultList.__name__ = true;
nape_geom_ConvexResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_ConvexResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
				nape_geom_ConvexResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_ConvexResultList
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x1;
				ret1.y = y1;
				var obj1 = ret1;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret2;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret2 = new nape_geom_Vec2();
					} else {
						ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
						ret2.zpp_pool = null;
						ret2.zpp_disp = false;
						if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
						}
					}
					if(ret2.zpp_inner == null) {
						var ret3;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret3 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.weak = false;
						ret3._immutable = false;
						ret3.x = x2;
						ret3.y = y2;
						ret2.zpp_inner = ret3;
						ret2.zpp_inner.outer = ret2;
					} else {
						if(ret2 != null && ret2.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret2.zpp_inner;
						if(_this4._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret2 != null && ret2.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret2.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret2.zpp_inner.x == x2) {
							if(ret2 != null && ret2.zpp_disp) {
								throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret2.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret2.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret2.zpp_inner.x = x2;
							ret2.zpp_inner.y = y2;
							var _this7 = ret2.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret2.zpp_inner.weak = false;
					var v2 = ret2;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret4;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret4 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret4 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.forced = false;
					ret4.x = x3;
					ret4.y = y3;
					var obj2 = ret4;
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(vite1 == verts) {
						break;
					}
				}
			}
		} else {
			throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
nape_geom_GeomPoly.__name__ = true;
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) {
		ret = new nape_geom_GeomPoly();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextGeomPoly) {
			zpp_$nape_util_ZPP_$PubPool.nextGeomPoly = null;
		}
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x;
				ret1.y = y;
				var obj = ret1;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret2;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret2 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret2 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.forced = false;
				ret2.x = x1;
				ret2.y = y1;
				var obj1 = ret2;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret3;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret3 = new nape_geom_Vec2();
					} else {
						ret3 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret3.zpp_pool;
						ret3.zpp_pool = null;
						ret3.zpp_disp = false;
						if(ret3 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
						}
					}
					if(ret3.zpp_inner == null) {
						var ret4;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret4 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.weak = false;
						ret4._immutable = false;
						ret4.x = x2;
						ret4.y = y2;
						ret3.zpp_inner = ret4;
						ret3.zpp_inner.outer = ret3;
					} else {
						if(ret3 != null && ret3.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret3.zpp_inner;
						if(_this4._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret3 != null && ret3.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret3.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret3.zpp_inner.x == x2) {
							if(ret3 != null && ret3.zpp_disp) {
								throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret3.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret3.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret3.zpp_inner.x = x2;
							ret3.zpp_inner.y = y2;
							var _this7 = ret3.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret3.zpp_inner.weak = false;
					var v2 = ret3;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret5;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret5 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret5 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.forced = false;
					ret5.x = x3;
					ret5.y = y3;
					var obj2 = ret5;
					if(ret.zpp_inner.vertices == null) {
						ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(!(vite1 != verts)) {
						break;
					}
				}
			}
		} else {
			throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	skipForward: function(times) {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.vertices != null) {
			if(times > 0) {
				while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
			} else if(times < 0) {
				while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
			}
		}
		return this;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				if(v != this.zpp_inner.vertices) {
					ret += ",";
				}
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$GeomPolyList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!");
	}
};
nape_geom_GeomPolyIterator.__name__ = true;
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
};
nape_geom_GeomPolyList.__name__ = true;
nape_geom_GeomPolyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_GeomPolyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
				nape_geom_GeomPolyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPolyList
};
var nape_geom_Mat23 = function() {
	this.zpp_inner = null;
};
nape_geom_Mat23.__name__ = true;
nape_geom_Mat23.prototype = {
	toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,__class__: nape_geom_Mat23
};
var nape_geom_MatMN = function() {
	this.zpp_inner = null;
};
nape_geom_MatMN.__name__ = true;
nape_geom_MatMN.prototype = {
	toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) {
				ret += "; ";
			}
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				if(i < 0 || j < 0 || i >= this.zpp_inner.m || j >= this.zpp_inner.n) {
					throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
				}
				ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,__class__: nape_geom_MatMN
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
};
nape_geom_RayResult.__name__ = true;
nape_geom_RayResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: " + this.zpp_inner.toiDistance + " ?inner: " + Std.string(this.zpp_inner.inner) + " }";
	}
	,__class__: nape_geom_RayResult
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$RayResultList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "RayResult" + "Iterator derp!");
	}
};
nape_geom_RayResultIterator.__name__ = true;
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
};
nape_geom_RayResultList.__name__ = true;
nape_geom_RayResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_RayResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_RayResultIterator.zpp_pool;
				nape_geom_RayResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_RayResultList
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Vec2();
	} else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
nape_geom_Vec2.__name__ = true;
nape_geom_Vec2.weak = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = true;
	return ret;
};
nape_geom_Vec2.get = function(x,y,weak) {
	if(weak == null) {
		weak = false;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) {
		weak = false;
	}
	if(length != length) {
		throw new js__$Boot_HaxeError("Error: Vec2::length cannot be NaN");
	}
	if(angle != angle) {
		throw new js__$Boot_HaxeError("Error: Vec2::angle cannot be NaN");
	}
	var x = length * Math.cos(angle);
	var y = length * Math.sin(angle);
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - b.zpp_inner.y;
	var ret = dx * dx + dy * dy;
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		var o = a;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		var o2 = b;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	return ret;
};
nape_geom_Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - b.zpp_inner.y;
	var ret = Math.sqrt(dx * dx + dy * dy);
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		var o = a;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		var o2 = b;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	return ret;
};
nape_geom_Vec2.prototype = {
	toString: function() {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$Vec2List.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Vec2" + "Iterator derp!");
	}
};
nape_geom_Vec2Iterator.__name__ = true;
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
nape_geom_Vec2List.__name__ = true;
nape_geom_Vec2List.fromArray = function(array) {
	if(array == null) {
		throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		var _this = this.zpp_inner.at_ite.elt;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_Vec2List
};
var nape_geom_Vec3 = function() {
	this.zpp_inner = null;
};
nape_geom_Vec3.__name__ = true;
nape_geom_Vec3.prototype = {
	toString: function() {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = "{ x: " + this.zpp_inner.x + " y: ";
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var tmp1 = tmp + this.zpp_inner.y + " z: ";
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		return tmp1 + this.zpp_inner.z + " }";
	}
	,__class__: nape_geom_Vec3
};
var nape_geom_Winding = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Winding" + " derp!");
	}
};
nape_geom_Winding.__name__ = true;
nape_geom_Winding.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED) {
			return "UNDEFINED";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE) {
				return "CLOCKWISE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE) {
					return "ANTICLOCKWISE";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
};
nape_phys_Interactor.__name__ = true;
nape_phys_Interactor.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
};
var nape_phys_Body = function() {
	this.zpp_inner = null;
};
nape_phys_Body.__name__ = true;
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return (this.zpp_inner.world ? "(space::world" : "(" + (this.zpp_inner.type == 2 ? "dynamic" : this.zpp_inner.type == 1 ? "static" : "kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Body
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$BodyList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Body" + "Iterator derp!");
	}
};
nape_phys_BodyIterator.__name__ = true;
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
};
nape_phys_BodyList.__name__ = true;
nape_phys_BodyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_BodyList
};
var nape_phys_BodyType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "BodyType" + " derp!");
	}
};
nape_phys_BodyType.__name__ = true;
nape_phys_BodyType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.BodyType_STATIC) {
			return "STATIC";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
				return "DYNAMIC";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
					return "KINEMATIC";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() { };
nape_phys_Compound.__name__ = true;
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Compound
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CompoundList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Compound" + "Iterator derp!");
	}
};
nape_phys_CompoundIterator.__name__ = true;
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
};
nape_phys_CompoundList.__name__ = true;
nape_phys_CompoundList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_CompoundIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_CompoundIterator.zpp_pool;
				nape_phys_CompoundIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_CompoundList
};
var nape_phys_FluidProperties = function() {
	this.zpp_inner = null;
};
nape_phys_FluidProperties.__name__ = true;
nape_phys_FluidProperties.prototype = {
	toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape_phys_FluidProperties
};
var nape_phys_GravMassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GravMassMode" + " derp!");
	}
};
nape_phys_GravMassMode.__name__ = true;
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED) {
				return "FIXED";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED) {
					return "SCALED";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InertiaMode" + " derp!");
	}
};
nape_phys_InertiaMode.__name__ = true;
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractorList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Interactor" + "Iterator derp!");
	}
};
nape_phys_InteractorIterator.__name__ = true;
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
};
nape_phys_InteractorList.__name__ = true;
nape_phys_InteractorList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_InteractorIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_InteractorIterator.zpp_pool;
				nape_phys_InteractorIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_InteractorList
};
var nape_phys_MassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "MassMode" + " derp!");
	}
};
nape_phys_MassMode.__name__ = true;
nape_phys_MassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.MassMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function() {
	this.zpp_inner = null;
};
nape_phys_Material.__name__ = true;
nape_phys_Material.prototype = {
	toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape_phys_Material
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
};
nape_shape_Shape.__name__ = true;
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		var ret = this.zpp_inner.type == 0 ? "Circle" : "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape_shape_Shape
});
var nape_shape_Circle = function() { };
nape_shape_Circle.__name__ = true;
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Circle
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_shape_ZPP_$Edge.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate an Edge derp!");
	}
};
nape_shape_Edge.__name__ = true;
nape_shape_Edge.prototype = {
	toString: function() {
		if(this.zpp_inner.polygon == null) {
			return "Edge(object-pooled)";
		} else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			var _this = this.zpp_inner.polygon;
			if(_this.zip_gaxi) {
				if(_this.body != null) {
					_this.zip_gaxi = false;
					_this.validate_laxi();
					var _this1 = _this.body;
					if(_this1.zip_axis) {
						_this1.zip_axis = false;
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					}
					if(_this.zip_gverts) {
						if(_this.body != null) {
							_this.zip_gverts = false;
							_this.validate_lverts();
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							var li = _this.lverts.next;
							var cx_ite = _this.gverts.next;
							while(cx_ite != null) {
								var g = cx_ite;
								var l = li;
								li = li.next;
								g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
								g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
								cx_ite = cx_ite.next;
							}
						}
					}
					var ite = _this.edges.head;
					var cx_ite1 = _this.gverts.next;
					var u = cx_ite1;
					cx_ite1 = cx_ite1.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var e = ite.elt;
						ite = ite.next;
						e.gp0 = u;
						e.gp1 = v;
						e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
						e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
						e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
						if(e.wrap_gnorm != null) {
							e.wrap_gnorm.zpp_inner.x = e.gnormx;
							e.wrap_gnorm.zpp_inner.y = e.gnormy;
						}
						e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
						e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
						u = v;
						cx_ite1 = cx_ite1.next;
					}
					var v1 = _this.gverts.next;
					var e1 = ite.elt;
					ite = ite.next;
					e1.gp0 = u;
					e1.gp1 = v1;
					e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
					e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
					if(e1.wrap_gnorm != null) {
						e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
						e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
					}
					e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
					e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
				}
			}
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$EdgeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Edge" + "Iterator derp!");
	}
};
nape_shape_EdgeIterator.__name__ = true;
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
};
nape_shape_EdgeList.__name__ = true;
nape_shape_EdgeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			if(index == this.zpp_inner.user_length - 1) {
				index = index;
			} else {
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = this.zpp_inner.inner.length;
				}
				index = this.zpp_inner.user_length - 2 - index;
			}
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_EdgeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_EdgeIterator.zpp_pool;
				nape_shape_EdgeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_EdgeList
};
var nape_shape_Polygon = function() { };
nape_shape_Polygon.__name__ = true;
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Polygon
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ShapeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Shape" + "Iterator derp!");
	}
};
nape_shape_ShapeIterator.__name__ = true;
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
};
nape_shape_ShapeList.__name__ = true;
nape_shape_ShapeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_ShapeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_ShapeIterator.zpp_pool;
				nape_shape_ShapeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_ShapeList
};
var nape_shape_ShapeType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ShapeType" + " derp!");
	}
};
nape_shape_ShapeType.__name__ = true;
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE) {
			return "CIRCLE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON) {
				return "POLYGON";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ValidationResult" + " derp!");
	}
};
nape_shape_ValidationResult.__name__ = true;
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
			return "VALID";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE) {
				return "DEGENERATE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE) {
					return "CONCAVE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING) {
						return "SELF_INTERSECTING";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Broadphase" + " derp!");
	}
};
nape_space_Broadphase.__name__ = true;
nape_space_Broadphase.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE) {
			return "DYNAMIC_AABB_TREE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
				return "SWEEP_AND_PRUNE";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function() { };
nape_space_Space.__name__ = true;
nape_space_Space.prototype = {
	__class__: nape_space_Space
};
var shaders_SkyShader = function() { };
shaders_SkyShader.__name__ = true;
var shaders_SkyEffectController = function(main) {
	this.mieKCoefficient = new THREE.Vector3();
	this.primaries = new THREE.Vector3();
	this.cameraPos = new THREE.Vector3();
	this.sunPosition = new THREE.Vector3();
	this.main = main;
	this.sunPosition.set(0,-700000,0);
	this.cameraPos.set(100000.0,-40000.0,0.0);
	this.turbidity = 2.0;
	this.rayleigh = 1.0;
	this.mieCoefficient = 0.005;
	this.mieDirectionalG = 0.8;
	this.luminance = 1.0;
	this.inclination = 0.49;
	this.azimuth = 0.25;
	this.refractiveIndex = 1.0003;
	this.numMolecules = 2.542e25;
	this.depolarizationFactor = 0.035;
	this.primaries.set(6.8e-7,5.5e-7,4.5e-7);
	this.mieKCoefficient.set(0.686,0.678,0.666);
	this.mieV = 4.0;
	this.rayleighZenithLength = 8.4e3;
	this.mieZenithLength = 1.25e3;
	this.sunIntensityFactor = 1000.0;
	this.sunIntensityFalloffSteepness = 1.5;
	this.sunAngularDiameterDegrees = 0.0;
	this.tonemapWeighting = 1000.0;
	this.updateUniforms();
	this.presetTransitionDuration = 5.0;
	this.set_preset("stellarDawn");
};
shaders_SkyEffectController.__name__ = true;
shaders_SkyEffectController.prototype = {
	updateUniforms: function() {
		shaders_SkyShader.uniforms.cameraPos.value = this.cameraPos;
		shaders_SkyShader.uniforms.turbidity.value = this.turbidity;
		shaders_SkyShader.uniforms.rayleigh.value = this.rayleigh;
		shaders_SkyShader.uniforms.mieCoefficient.value = this.mieCoefficient;
		shaders_SkyShader.uniforms.mieDirectionalG.value = this.mieDirectionalG;
		shaders_SkyShader.uniforms.luminance.value = this.luminance;
		var theta = Math.PI * (this.inclination - 0.5);
		var phi = 2 * Math.PI * (this.azimuth - 0.5);
		var distance = 400000;
		this.sunPosition.x = distance * Math.cos(phi);
		this.sunPosition.y = distance * Math.sin(phi) * Math.sin(theta);
		this.sunPosition.z = distance * Math.sin(phi) * Math.cos(theta);
		shaders_SkyShader.uniforms.sunPosition.value.copy(this.sunPosition);
		shaders_SkyShader.uniforms.refractiveIndex.value = this.refractiveIndex;
		shaders_SkyShader.uniforms.numMolecules.value = this.numMolecules;
		shaders_SkyShader.uniforms.depolarizationFactor.value = this.depolarizationFactor;
		shaders_SkyShader.uniforms.rayleighZenithLength.value = this.rayleighZenithLength;
		shaders_SkyShader.uniforms.primaries.value.copy(this.primaries);
		shaders_SkyShader.uniforms.mieKCoefficient.value.copy(this.mieKCoefficient);
		shaders_SkyShader.uniforms.mieV.value = this.mieV;
		shaders_SkyShader.uniforms.mieZenithLength.value = this.mieZenithLength;
		shaders_SkyShader.uniforms.sunIntensityFactor.value = this.sunIntensityFactor;
		shaders_SkyShader.uniforms.sunIntensityFalloffSteepness.value = this.sunIntensityFalloffSteepness;
		shaders_SkyShader.uniforms.sunAngularDiameterDegrees.value = this.sunAngularDiameterDegrees;
		shaders_SkyShader.uniforms.tonemapWeighting.value = this.tonemapWeighting;
	}
	,presetChanged: function(preset,duration) {
		if(duration == null) {
			duration = 3;
		}
		switch(preset) {
		case "alienDay":
			this.alienDay(duration);
			break;
		case "bloodSky":
			this.bloodSky(duration);
			break;
		case "blueDusk":
			this.blueDusk(duration);
			break;
		case "purpleDusk":
			this.purpleDusk(duration);
			break;
		case "redSunset":
			this.redSunset(duration);
			break;
		case "stellarDawn":
			this.stellarDawn(duration);
			break;
		default:
		}
	}
	,stellarDawn: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 1.25, rayleigh : 1.00, mieCoefficient : 0.00335, mieDirectionalG : 0.787, luminance : 1.0, inclination : 0.4945, azimuth : 0.2508, refractiveIndex : 1.000317, numMolecules : 2.542e25, depolarizationFactor : 0.067, rayleighZenithLength : 615, mieV : 4.012, mieZenithLength : 500, sunIntensityFactor : 1111, sunIntensityFalloffSteepness : 0.98, sunAngularDiameterDegrees : 0.00758, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 6.8e-7, y : 5.5e-7, z : 4.5e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,redSunset: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 4.7, rayleigh : 2.28, mieCoefficient : 0.005, mieDirectionalG : 0.82, luminance : 1.00, inclination : 0.4983, azimuth : 0.1979, refractiveIndex : 1.00029, numMolecules : 2.542e25, depolarizationFactor : 0.02, rayleighZenithLength : 8400, mieV : 3.936, mieZenithLength : 34000, sunIntensityFactor : 1000, sunIntensityFalloffSteepness : 1.5, sunAngularDiameterDegrees : 0.00933, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 6.8e-7, y : 5.5e-7, z : 4.5e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,alienDay: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 12.575, rayleigh : 5.75, mieCoefficient : 0.0074, mieDirectionalG : 0.468, luminance : 1.00, inclination : 0.4901, azimuth : 0.1866, refractiveIndex : 1.000128, numMolecules : 2.542e25, depolarizationFactor : 0.137, rayleighZenithLength : 3795, mieV : 4.007, mieZenithLength : 7100, sunIntensityFactor : 1024, sunIntensityFalloffSteepness : 1.4, sunAngularDiameterDegrees : 0.006, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 6.8e-7, y : 5.5e-7, z : 4.5e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,blueDusk: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 2.5, rayleigh : 2.295, mieCoefficient : 0.011475, mieDirectionalG : 0.814, luminance : 1.00, inclination : 0.4987, azimuth : 0.2268, refractiveIndex : 1.000262, numMolecules : 2.542e25, depolarizationFactor : 0.095, rayleighZenithLength : 540, mieV : 3.979, mieZenithLength : 1000, sunIntensityFactor : 1151, sunIntensityFalloffSteepness : 1.22, sunAngularDiameterDegrees : 0.00639, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 6.8e-7, y : 5.5e-7, z : 4.5e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,purpleDusk: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 3.6, rayleigh : 2.26, mieCoefficient : 0.005, mieDirectionalG : 0.822, luminance : 1.00, inclination : 0.502, azimuth : 0.2883, refractiveIndex : 1.000294, numMolecules : 2.542e25, depolarizationFactor : 0.068, rayleighZenithLength : 12045, mieV : 3.976, mieZenithLength : 34000, sunIntensityFactor : 1631, sunIntensityFalloffSteepness : 1.5, sunAngularDiameterDegrees : 0.00933, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 7.5e-7, y : 4.5e-7, z : 5.1e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,bloodSky: function(duration) {
		if(duration == null) {
			duration = 3;
		}
		var _gthis = this;
		motion_Actuate.tween(this,duration,{ turbidity : 4.75, rayleigh : 6.77, mieCoefficient : 0.0191, mieDirectionalG : 0.793, luminance : 1.1735, inclination : 0.4956, azimuth : 0.2174, refractiveIndex : 1.000633, numMolecules : 2.542e25, depolarizationFactor : 0.01, rayleighZenithLength : 1425, mieV : 4.042, mieZenithLength : 1600, sunIntensityFactor : 2069, sunIntensityFalloffSteepness : 2.26, sunAngularDiameterDegrees : 0.01487, tonemapWeighting : 1000}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.primaries,duration,{ x : 7.929e-7, y : 3.766e-7, z : 3.172e-7}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.mieKCoefficient,duration,{ x : 0.686, y : 0.678, z : 0.666}).onUpdate(function() {
			_gthis.updateUniforms();
		});
		motion_Actuate.tween(this.cameraPos,duration,{ x : 100000, y : -40000, z : 0}).onUpdate(function() {
			_gthis.updateUniforms();
		});
	}
	,set_preset: function(nextPreset) {
		this.preset = nextPreset;
		this.presetChanged(nextPreset,this.presetTransitionDuration);
		return this.preset;
	}
	,__class__: shaders_SkyEffectController
	,__properties__: {set_preset:"set_preset"}
};
var zpp_$nape_ZPP_$ID = function() { };
zpp_$nape_ZPP_$ID.__name__ = true;
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.int2 = null;
	this.int1 = null;
	this.listener = null;
	this.event = 0;
};
zpp_$nape_callbacks_ZPP_$Callback.__name__ = true;
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
};
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
};
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
};
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
zpp_$nape_callbacks_ZPP_$CbType.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_util_ZPP_$Flags = function() { };
zpp_$nape_util_ZPP_$Flags.__name__ = true;
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.outer = null;
};
zpp_$nape_callbacks_ZPP_$Listener.__name__ = true;
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function() {
	this.options = null;
	this.outer_zn = null;
};
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function() {
	this.options = null;
	this.outer_zn = null;
};
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function() {
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
};
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.outer = null;
};
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = true;
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.outer = null;
};
zpp_$nape_constraint_ZPP_$Constraint.__name__ = true;
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.ws2 = null;
	this.ws1 = null;
	this.immState = 0;
	this.cleared = false;
	this.active = false;
	this.outer = null;
};
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else {
				this.outer = new nape_dynamics_Arbiter();
			}
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.outer_zn = null;
};
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.stat = false;
	this.outer_zn = null;
};
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.pushmod = false;
	this.modified = false;
	this.next = null;
	this.active = false;
	this.arbiter = null;
	this.outer = null;
};
zpp_$nape_dynamics_ZPP_$Contact.__name__ = true;
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.ignore = false;
	this.outer = null;
};
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.miny = 0.0;
	this.minx = 0.0;
	this._validate = null;
};
zpp_$nape_geom_ZPP_$AABB.__name__ = true;
zpp_$nape_geom_ZPP_$AABB.prototype = {
	toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.shape = null;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = true;
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_$nape_geom_ZPP_$GeomVert.__name__ = true;
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = true;
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
};
zpp_$nape_geom_ZPP_$Mat23.__name__ = true;
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function() {
	this.x = null;
	this.n = 0;
	this.m = 0;
};
zpp_$nape_geom_ZPP_$MatMN.__name__ = true;
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_$nape_geom_ZPP_$Vec2.__name__ = true;
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_$nape_geom_ZPP_$Vec3.__name__ = true;
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.id = 0;
	this.outer_i = null;
};
zpp_$nape_phys_ZPP_$Interactor.__name__ = true;
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.posy = 0.0;
	this.posx = 0.0;
	this.type = 0;
	this.world = false;
	this.outer = null;
};
zpp_$nape_phys_ZPP_$Body.__name__ = true;
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.outer = null;
};
zpp_$nape_phys_ZPP_$Compound.__name__ = true;
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.density = 0.0;
	this.viscosity = 0.0;
};
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = true;
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
};
zpp_$nape_phys_ZPP_$Material.__name__ = true;
zpp_$nape_phys_ZPP_$Material.prototype = {
	__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function() {
	this.polygon = null;
	this.circle = null;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
};
zpp_$nape_shape_ZPP_$Shape.__name__ = true;
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == 0) {
				this.circle.__validate_area_inertia();
			} else {
				this.polygon.__validate_area_inertia();
			}
		}
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
};
zpp_$nape_shape_ZPP_$Circle.__name__ = true;
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
};
zpp_$nape_shape_ZPP_$Edge.__name__ = true;
zpp_$nape_shape_ZPP_$Edge.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
};
zpp_$nape_shape_ZPP_$Polygon.__name__ = true;
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) {
			this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_gverts != null) {
			this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_edges != null) {
			this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v1.x;
			dy1 = u.y - v1.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w2.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$RayResult.__name__ = true;
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$RayResult.__name__ = true;
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ConstraintList.__name__ = true;
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$BodyList.__name__ = true;
zpp_$nape_util_ZPP_$BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$InteractorList.__name__ = true;
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$CompoundList.__name__ = true;
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ListenerList.__name__ = true;
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$CbTypeList.__name__ = true;
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$Vec2List.__name__ = true;
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = true;
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$RayResultList.__name__ = true;
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = true;
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$EdgeList.__name__ = true;
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ShapeList.__name__ = true;
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = true;
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ArbiterList.__name__ = true;
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
zpp_$nape_util_ZPP_$ContactList.__name__ = true;
zpp_$nape_util_ZPP_$ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
zpp_$nape_util_ZPP_$PubPool.__name__ = true;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
msignal_SlotList.NIL = new msignal_SlotList(null,null);
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
shaders_SkyShader.uniforms = (function($this) {
	var $r;
	var tmp = { type : "v3", value : new THREE.Vector3()};
	var tmp1 = { type : "v3", value : new THREE.Vector3()};
	var tmp2 = { type : "v3", value : new THREE.Vector3()};
	$r = { luminance : { type : "f", value : 1.0}, turbidity : { type : "f", value : 1.0}, rayleigh : { type : "f", value : 1.0}, mieCoefficient : { type : "f", value : 1.0}, mieDirectionalG : { type : "f", value : 1.0}, sunPosition : tmp, cameraPos : tmp1, refractiveIndex : { type : "f", value : 1.0}, numMolecules : { type : "f", value : 1.0}, depolarizationFactor : { type : "f", value : 1.0}, primaries : tmp2, mieKCoefficient : { type : "v3", value : new THREE.Vector3()}, mieV : { type : "f", value : 1.0}, rayleighZenithLength : { type : "f", value : 1.0}, mieZenithLength : { type : "f", value : 1.0}, sunIntensityFactor : { type : "f", value : 1.0}, sunIntensityFalloffSteepness : { type : "f", value : 1.0}, sunAngularDiameterDegrees : { type : "f", value : 1.0}, tonemapWeighting : { type : "f", value : 1000.0}};
	return $r;
}(this));
shaders_SkyShader.vertexShader = "varying vec3 vWorldPosition;\r\n\r\nvoid main()\r\n{\r\n\tvec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n\tvWorldPosition = worldPosition.xyz;\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}";
shaders_SkyShader.fragmentShader = "varying vec3 vWorldPosition;\r\n\r\nuniform vec3 sunPosition;\r\nuniform float luminance;\r\nuniform float turbidity;\r\nuniform float rayleigh;\r\nuniform float mieCoefficient;\r\nuniform float mieDirectionalG;\r\nuniform vec3 cameraPos;\r\nuniform float refractiveIndex;\r\nuniform float numMolecules;\r\nuniform float depolarizationFactor;\r\nuniform vec3 primaries;\r\nuniform vec3 mieKCoefficient;\r\nuniform float mieV;\r\nuniform float rayleighZenithLength;\r\nuniform float mieZenithLength;\r\nuniform float sunIntensityFactor;\r\nuniform float sunIntensityFalloffSteepness;\r\nuniform float sunAngularDiameterDegrees;\r\nuniform float tonemapWeighting;\r\n\r\nconst float pi = 3.141592653589793238462643383279502884197169;\r\nconst vec3 up = vec3(0.0, 1.0, 0.0);\r\n\r\nvec3 totalRayleigh(vec3 lambda)\r\n{\r\n\treturn (8.0 * pow(pi, 3.0) * pow(pow(refractiveIndex, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * depolarizationFactor)) / (3.0 * numMolecules * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * depolarizationFactor));\r\n}\r\n\r\nvec3 totalMie(vec3 lambda, vec3 K, float T)\r\n{\r\n\tfloat c = 0.2 * T * 10e-18;\r\n\treturn 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(mieV - 2.0)) * K;\r\n}\r\n\r\nfloat rayleighPhase(float cosTheta)\r\n{\r\n\treturn (3.0 / (16.0 * pi)) * (1.0 + pow(cosTheta, 2.0));\r\n}\r\n\r\nfloat henyeyGreensteinPhase(float cosTheta, float g)\r\n{\r\n\treturn (1.0 / (4.0 * pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0 * g * cosTheta + pow(g, 2.0), 1.5));\r\n}\r\n\r\nfloat sunIntensity(float zenithAngleCos)\r\n{\r\n\tfloat cutoffAngle = pi / 1.95; // Earth shadow hack\r\n\treturn sunIntensityFactor * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos)) / sunIntensityFalloffSteepness)));\r\n}\r\n\r\n// Whitescale tonemapping calculation, see http://filmicgames.com/archives/75\r\n// Also see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\r\nconst float A = 0.15; // Shoulder strength\r\nconst float B = 0.50; // Linear strength\r\nconst float C = 0.10; // Linear angle\r\nconst float D = 0.20; // Toe strength\r\nconst float E = 0.02; // Toe numerator\r\nconst float F = 0.30; // Toe denominator\r\nvec3 Uncharted2Tonemap(vec3 W)\r\n{\r\n\treturn ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\r\n}\r\n\r\nvoid main()\r\n{\r\n\t// Rayleigh coefficient\r\n\tfloat sunfade = 1.0 - clamp(1.0 - exp((sunPosition.y / 450000.0)), 0.0, 1.0);\r\n\tfloat rayleighCoefficient = rayleigh - (1.0 * (1.0 - sunfade));\r\n\tvec3 betaR = totalRayleigh(primaries) * rayleighCoefficient;\r\n\t\r\n\t// Mie coefficient\r\n\tvec3 betaM = totalMie(primaries, mieKCoefficient, turbidity) * mieCoefficient;\r\n\t\r\n\t// Optical length, cutoff angle at 90 to avoid singularity\r\n\tfloat zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\r\n\tfloat denom = cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253);\r\n\tfloat sR = rayleighZenithLength / denom;\r\n\tfloat sM = mieZenithLength / denom;\r\n\t\r\n\t// Combined extinction factor\r\n\tvec3 Fex = exp(-(betaR * sR + betaM * sM));\r\n\t\r\n\t// In-scattering\r\n\tvec3 sunDirection = normalize(sunPosition);\r\n\tfloat cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\r\n\tvec3 betaRTheta = betaR * rayleighPhase(cosTheta * 0.5 + 0.5);\r\n\tvec3 betaMTheta = betaM * henyeyGreensteinPhase(cosTheta, mieDirectionalG);\r\n\tfloat sunE = sunIntensity(dot(sunDirection, up));\r\n\tvec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex), vec3(1.5));\r\n\tLin *= mix(vec3(1.0), pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex, vec3(0.5)), clamp(pow(1.0 - dot(up, sunDirection), 5.0), 0.0, 1.0));\r\n\t\r\n\t// Composition + solar disc\r\n\tfloat sunAngularDiameterCos = cos(sunAngularDiameterDegrees);\r\n\tfloat sundisk = smoothstep(sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta);\r\n\tvec3 L0 = vec3(0.1) * Fex;\r\n\tL0 += sunE * 19000.0 * Fex * sundisk;\r\n\tvec3 texColor = Lin + L0;\r\n\ttexColor *= 0.04;\r\n\ttexColor += vec3(0.0, 0.001, 0.0025) * 0.3;\r\n\t\r\n\t// Tonemapping\r\n\tvec3 whiteScale = 1.0 / Uncharted2Tonemap(vec3(tonemapWeighting)); \r\n\tvec3 curr = Uncharted2Tonemap((log2(2.0 / pow(luminance, 4.0))) * texColor);\r\n\tvec3 color = curr * whiteScale;\r\n\tvec3 retColor = pow(color, vec3(1.0 / (1.2 + (1.2 * sunfade))));\r\n\t\r\n\tgl_FragColor.xyz = retColor;\r\n\tgl_FragColor.w = 1.0;\r\n}";
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
